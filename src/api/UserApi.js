/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AccessToken} from '../model/AccessToken';
import {CreateAccessTokenOption} from '../model/CreateAccessTokenOption';
import {CreateEmailOption} from '../model/CreateEmailOption';
import {CreateGPGKeyOption} from '../model/CreateGPGKeyOption';
import {CreateKeyOption} from '../model/CreateKeyOption';
import {CreateOAuth2ApplicationOptions} from '../model/CreateOAuth2ApplicationOptions';
import {CreateRepoOption} from '../model/CreateRepoOption';
import {Email} from '../model/Email';
import {GPGKey} from '../model/GPGKey';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {OAuth2Application} from '../model/OAuth2Application';
import {PublicKey} from '../model/PublicKey';
import {Repository} from '../model/Repository';
import {StopWatch} from '../model/StopWatch';
import {Team} from '../model/Team';
import {TrackedTime} from '../model/TrackedTime';
import {User} from '../model/User';
import {UserHeatmapData} from '../model/UserHeatmapData';
import {UserSettings} from '../model/UserSettings';
import {UserSettingsOptions} from '../model/UserSettingsOptions';

/**
* User service.
* @module api/UserApi
* @version 1.15.6a+dcs
*/
export class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createCurrentUserRepo operation.
     * @callback moduleapi/UserApi~createCurrentUserRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRepoOption} opts.body 
     * @param {module:api/UserApi~createCurrentUserRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCurrentUserRepo(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Repository;

      return this.apiClient.callApi(
        '/user/repos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserSettings operation.
     * @callback moduleapi/UserApi~getUserSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSettings>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user settings
     * @param {module:api/UserApi~getUserSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUserSettings(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserSettings];

      return this.apiClient.callApi(
        '/user/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVerificationToken operation.
     * @callback moduleapi/UserApi~getVerificationTokenCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Token to verify
     * @param {module:api/UserApi~getVerificationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getVerificationToken(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/user/gpg_key_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateUserSettings operation.
     * @callback moduleapi/UserApi~updateUserSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSettings>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user settings
     * @param {Object} opts Optional parameters
     * @param {module:model/UserSettingsOptions} opts.body 
     * @param {module:api/UserApi~updateUserSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateUserSettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json'];
      let returnType = [UserSettings];

      return this.apiClient.callApi(
        '/user/settings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userAddEmail operation.
     * @callback moduleapi/UserApi~userAddEmailCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add email addresses
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateEmailOption} opts.body 
     * @param {module:api/UserApi~userAddEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userAddEmail(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json'];
      let returnType = [Email];

      return this.apiClient.callApi(
        '/user/emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCheckFollowing operation.
     * @callback moduleapi/UserApi~userCheckFollowingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if one user is following another user
     * @param {String} follower username of following user
     * @param {String} followee username of followed user
     * @param {module:api/UserApi~userCheckFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCheckFollowing(follower, followee, callback) {
      
      let postBody = null;
      // verify the required parameter 'follower' is set
      if (follower === undefined || follower === null) {
        throw new Error("Missing the required parameter 'follower' when calling userCheckFollowing");
      }
      // verify the required parameter 'followee' is set
      if (followee === undefined || followee === null) {
        throw new Error("Missing the required parameter 'followee' when calling userCheckFollowing");
      }

      let pathParams = {
        'follower': follower,'followee': followee
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{follower}/following/{followee}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCreateOAuth2Application operation.
     * @callback moduleapi/UserApi~userCreateOAuth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Application{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new OAuth2 application
     * @param {module:model/CreateOAuth2ApplicationOptions} body 
     * @param {module:api/UserApi~userCreateOAuth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCreateOAuth2Application(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userCreateOAuth2Application");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json'];
      let returnType = OAuth2Application;

      return this.apiClient.callApi(
        '/user/applications/oauth2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCreateToken operation.
     * @callback moduleapi/UserApi~userCreateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an access token
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAccessTokenOption} opts.body 
     * @param {module:api/UserApi~userCreateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCreateToken(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCreateToken");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccessToken;

      return this.apiClient.callApi(
        '/users/{username}/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentCheckFollowing operation.
     * @callback moduleapi/UserApi~userCurrentCheckFollowingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a user is followed by the authenticated user
     * @param {String} username username of followed user
     * @param {module:api/UserApi~userCurrentCheckFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentCheckFollowing(username, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCurrentCheckFollowing");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/following/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentCheckStarring operation.
     * @callback moduleapi/UserApi~userCurrentCheckStarringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Whether the authenticated is starring the repo
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {module:api/UserApi~userCurrentCheckStarringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentCheckStarring(owner, repo, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentCheckStarring");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentCheckStarring");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/starred/{owner}/{repo}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentDeleteFollow operation.
     * @callback moduleapi/UserApi~userCurrentDeleteFollowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a user
     * @param {String} username username of user to unfollow
     * @param {module:api/UserApi~userCurrentDeleteFollowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteFollow(username, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCurrentDeleteFollow");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/following/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentDeleteGPGKey operation.
     * @callback moduleapi/UserApi~userCurrentDeleteGPGKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a GPG key
     * @param {Number} id id of key to delete
     * @param {module:api/UserApi~userCurrentDeleteGPGKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteGPGKey(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userCurrentDeleteGPGKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/gpg_keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentDeleteKey operation.
     * @callback moduleapi/UserApi~userCurrentDeleteKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a public key
     * @param {Number} id id of key to delete
     * @param {module:api/UserApi~userCurrentDeleteKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteKey(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userCurrentDeleteKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentDeleteStar operation.
     * @callback moduleapi/UserApi~userCurrentDeleteStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unstar the given repo
     * @param {String} owner owner of the repo to unstar
     * @param {String} repo name of the repo to unstar
     * @param {module:api/UserApi~userCurrentDeleteStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentDeleteStar(owner, repo, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentDeleteStar");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentDeleteStar");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/starred/{owner}/{repo}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentGetGPGKey operation.
     * @callback moduleapi/UserApi~userCurrentGetGPGKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GPGKey{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a GPG key
     * @param {Number} id id of key to get
     * @param {module:api/UserApi~userCurrentGetGPGKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentGetGPGKey(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userCurrentGetGPGKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GPGKey;

      return this.apiClient.callApi(
        '/user/gpg_keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentGetKey operation.
     * @callback moduleapi/UserApi~userCurrentGetKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicKey{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a public key
     * @param {Number} id id of key to get
     * @param {module:api/UserApi~userCurrentGetKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentGetKey(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userCurrentGetKey");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicKey;

      return this.apiClient.callApi(
        '/user/keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentListFollowers operation.
     * @callback moduleapi/UserApi~userCurrentListFollowersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user&#x27;s followers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userCurrentListFollowersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentListFollowers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];

      return this.apiClient.callApi(
        '/user/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentListFollowing operation.
     * @callback moduleapi/UserApi~userCurrentListFollowingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the users that the authenticated user is following
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userCurrentListFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentListFollowing(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];

      return this.apiClient.callApi(
        '/user/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentListGPGKeys operation.
     * @callback moduleapi/UserApi~userCurrentListGPGKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GPGKey>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user&#x27;s GPG keys
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userCurrentListGPGKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentListGPGKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GPGKey];

      return this.apiClient.callApi(
        '/user/gpg_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentListKeys operation.
     * @callback moduleapi/UserApi~userCurrentListKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicKey>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user&#x27;s public keys
     * @param {Object} opts Optional parameters
     * @param {String} opts.fingerprint fingerprint of the key
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userCurrentListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentListKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'fingerprint': opts['fingerprint'],'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicKey];

      return this.apiClient.callApi(
        '/user/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentListRepos operation.
     * @callback moduleapi/UserApi~userCurrentListReposCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the repos that the authenticated user owns or has access to
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userCurrentListReposCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentListRepos(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/user/repos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentListStarred operation.
     * @callback moduleapi/UserApi~userCurrentListStarredCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The repos that the authenticated user has starred
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userCurrentListStarredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentListStarred(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/user/starred', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentListSubscriptions operation.
     * @callback moduleapi/UserApi~userCurrentListSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories watched by the authenticated user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userCurrentListSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentListSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/user/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentPostGPGKey operation.
     * @callback moduleapi/UserApi~userCurrentPostGPGKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GPGKey{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a GPG key
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGPGKeyOption} opts.body 
     * @param {module:api/UserApi~userCurrentPostGPGKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentPostGPGKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GPGKey;

      return this.apiClient.callApi(
        '/user/gpg_keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentPostKey operation.
     * @callback moduleapi/UserApi~userCurrentPostKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicKey{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a public key
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyOption} opts.body 
     * @param {module:api/UserApi~userCurrentPostKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentPostKey(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicKey;

      return this.apiClient.callApi(
        '/user/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentPutFollow operation.
     * @callback moduleapi/UserApi~userCurrentPutFollowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a user
     * @param {String} username username of user to follow
     * @param {module:api/UserApi~userCurrentPutFollowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentPutFollow(username, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userCurrentPutFollow");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/following/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentPutStar operation.
     * @callback moduleapi/UserApi~userCurrentPutStarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Star the given repo
     * @param {String} owner owner of the repo to star
     * @param {String} repo name of the repo to star
     * @param {module:api/UserApi~userCurrentPutStarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userCurrentPutStar(owner, repo, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling userCurrentPutStar");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling userCurrentPutStar");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/starred/{owner}/{repo}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userCurrentTrackedTimes operation.
     * @callback moduleapi/UserApi~userCurrentTrackedTimesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackedTime>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the current user&#x27;s tracked times
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since Only show times updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} opts.before Only show times updated before the given time. This is a timestamp in RFC 3339 format
     * @param {module:api/UserApi~userCurrentTrackedTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userCurrentTrackedTimes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'since': opts['since'],'before': opts['before']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackedTime];

      return this.apiClient.callApi(
        '/user/times', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userDeleteAccessToken operation.
     * @callback moduleapi/UserApi~userDeleteAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an access token
     * @param {String} username username of user
     * @param {String} token token to be deleted, identified by ID and if not available by name
     * @param {module:api/UserApi~userDeleteAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userDeleteAccessToken(username, token, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userDeleteAccessToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling userDeleteAccessToken");
      }

      let pathParams = {
        'username': username,'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/tokens/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userDeleteOAuth2Application operation.
     * @callback moduleapi/UserApi~userDeleteOAuth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete an OAuth2 Application
     * @param {Number} id token to be deleted
     * @param {module:api/UserApi~userDeleteOAuth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userDeleteOAuth2Application(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userDeleteOAuth2Application");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/user/applications/oauth2/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGet operation.
     * @callback moduleapi/UserApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * @param {String} username username of user to get
     * @param {module:api/UserApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userGet(username, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userGet");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGetCurrent operation.
     * @callback moduleapi/UserApi~userGetCurrentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the authenticated user
     * @param {module:api/UserApi~userGetCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userGetCurrent(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGetHeatmapData operation.
     * @callback moduleapi/UserApi~userGetHeatmapDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserHeatmapData>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user&#x27;s heatmap
     * @param {String} username username of user to get
     * @param {module:api/UserApi~userGetHeatmapDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userGetHeatmapData(username, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userGetHeatmapData");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserHeatmapData];

      return this.apiClient.callApi(
        '/users/{username}/heatmap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGetOAuth2Application operation.
     * @callback moduleapi/UserApi~userGetOAuth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Application{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an OAuth2 Application
     * @param {Number} id Application ID to be found
     * @param {module:api/UserApi~userGetOAuth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userGetOAuth2Application(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGetOAuth2Application");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OAuth2Application;

      return this.apiClient.callApi(
        '/user/applications/oauth2/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGetOauth2Application operation.
     * @callback moduleapi/UserApi~userGetOauth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OAuth2Application>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user&#x27;s oauth2 applications
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userGetOauth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userGetOauth2Application(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OAuth2Application];

      return this.apiClient.callApi(
        '/user/applications/oauth2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGetStopWatches operation.
     * @callback moduleapi/UserApi~userGetStopWatchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StopWatch>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of all existing stopwatches
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userGetStopWatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userGetStopWatches(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StopWatch];

      return this.apiClient.callApi(
        '/user/stopwatches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGetTokens operation.
     * @callback moduleapi/UserApi~userGetTokensCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user&#x27;s access tokens
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userGetTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userGetTokens(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userGetTokens");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccessToken];

      return this.apiClient.callApi(
        '/users/{username}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListEmails operation.
     * @callback moduleapi/UserApi~userListEmailsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Email>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the authenticated user&#x27;s email addresses
     * @param {module:api/UserApi~userListEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListEmails(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Email];

      return this.apiClient.callApi(
        '/user/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListFollowers operation.
     * @callback moduleapi/UserApi~userListFollowersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the given user&#x27;s followers
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userListFollowersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListFollowers(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListFollowers");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];

      return this.apiClient.callApi(
        '/users/{username}/followers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListFollowing operation.
     * @callback moduleapi/UserApi~userListFollowingCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the users that the given user is following
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userListFollowingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListFollowing(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListFollowing");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];

      return this.apiClient.callApi(
        '/users/{username}/following', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListGPGKeys operation.
     * @callback moduleapi/UserApi~userListGPGKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GPGKey>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the given user&#x27;s GPG keys
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userListGPGKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListGPGKeys(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListGPGKeys");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GPGKey];

      return this.apiClient.callApi(
        '/users/{username}/gpg_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListKeys operation.
     * @callback moduleapi/UserApi~userListKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicKey>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the given user&#x27;s public keys
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.fingerprint fingerprint of the key
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListKeys(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListKeys");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'fingerprint': opts['fingerprint'],'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PublicKey];

      return this.apiClient.callApi(
        '/users/{username}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListRepos operation.
     * @callback moduleapi/UserApi~userListReposCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the repos owned by the given user
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userListReposCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListRepos(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListRepos");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/users/{username}/repos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListStarred operation.
     * @callback moduleapi/UserApi~userListStarredCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The repos that the given user has starred
     * @param {String} username username of user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userListStarredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListStarred(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListStarred");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/users/{username}/starred', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListSubscriptions operation.
     * @callback moduleapi/UserApi~userListSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the repositories watched by a user
     * @param {String} username username of the user
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userListSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListSubscriptions(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling userListSubscriptions");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/users/{username}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userListTeams operation.
     * @callback moduleapi/UserApi~userListTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the teams a user belongs to
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userListTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userListTeams(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];

      return this.apiClient.callApi(
        '/user/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userSearch operation.
     * @callback moduleapi/UserApi~userSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for users
     * @param {Object} opts Optional parameters
     * @param {String} opts.q keyword
     * @param {Number} opts.uid ID of the user to search for
     * @param {String} opts.lang If the user has one or more repos with the given language(s), the org will be in the results. Multiple lang&#x27;s are ORed.
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/UserApi~userSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'q': opts['q'],'uid': opts['uid'],'lang': opts['lang'],'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/users/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userUpdateOAuth2Application operation.
     * @callback moduleapi/UserApi~userUpdateOAuth2ApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuth2Application{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update an OAuth2 Application, this includes regenerating the client secret
     * @param {module:model/CreateOAuth2ApplicationOptions} body 
     * @param {Number} id application to be updated
     * @param {module:api/UserApi~userUpdateOAuth2ApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userUpdateOAuth2Application(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling userUpdateOAuth2Application");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userUpdateOAuth2Application");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json', 'text/plain'];
      let accepts = ['application/json'];
      let returnType = OAuth2Application;

      return this.apiClient.callApi(
        '/user/applications/oauth2/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userVerifyGPGKey operation.
     * @callback moduleapi/UserApi~userVerifyGPGKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GPGKey{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify a GPG key
     * @param {module:api/UserApi~userVerifyGPGKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userVerifyGPGKey(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GPGKey;

      return this.apiClient.callApi(
        '/user/gpg_key_verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}