/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AddTimeOption} from '../model/AddTimeOption';
import {Comment} from '../model/Comment';
import {CreateIssueCommentOption} from '../model/CreateIssueCommentOption';
import {CreateIssueOption} from '../model/CreateIssueOption';
import {CreateLabelOption} from '../model/CreateLabelOption';
import {CreateMilestoneOption} from '../model/CreateMilestoneOption';
import {EditDeadlineOption} from '../model/EditDeadlineOption';
import {EditIssueCommentOption} from '../model/EditIssueCommentOption';
import {EditIssueOption} from '../model/EditIssueOption';
import {EditLabelOption} from '../model/EditLabelOption';
import {EditMilestoneOption} from '../model/EditMilestoneOption';
import {EditReactionOption} from '../model/EditReactionOption';
import {Issue} from '../model/Issue';
import {IssueDeadline} from '../model/IssueDeadline';
import {IssueLabelsOption} from '../model/IssueLabelsOption';
import {Label} from '../model/Label';
import {Milestone} from '../model/Milestone';
import {Reaction} from '../model/Reaction';
import {TrackedTime} from '../model/TrackedTime';
import {User} from '../model/User';
import {WatchInfo} from '../model/WatchInfo';

/**
* Issue service.
* @module api/IssueApi
* @version 1.15.6a+dcs
*/
export class IssueApi {

    /**
    * Constructs a new IssueApi. 
    * @alias module:api/IssueApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the issueAddLabel operation.
     * @callback moduleapi/IssueApi~issueAddLabelCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a label to an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/IssueLabelsOption} opts.body 
     * @param {module:api/IssueApi~issueAddLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueAddLabel(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueAddLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueAddLabel");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueAddLabel");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Label];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueAddSubscription operation.
     * @callback moduleapi/IssueApi~issueAddSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe user to issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {String} user user to subscribe
     * @param {module:api/IssueApi~issueAddSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueAddSubscription(owner, repo, index, user, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueAddSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueAddSubscription");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueAddSubscription");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling issueAddSubscription");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index,'user': user
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueAddTime operation.
     * @callback moduleapi/IssueApi~issueAddTimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackedTime{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tracked time to a issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/AddTimeOption} opts.body 
     * @param {module:api/IssueApi~issueAddTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueAddTime(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueAddTime");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueAddTime");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueAddTime");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TrackedTime;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/times', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueCheckSubscription operation.
     * @callback moduleapi/IssueApi~issueCheckSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if user is subscribed to an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {module:api/IssueApi~issueCheckSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueCheckSubscription(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCheckSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCheckSubscription");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueCheckSubscription");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WatchInfo;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/subscriptions/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueClearLabels operation.
     * @callback moduleapi/IssueApi~issueClearLabelsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all labels from an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {module:api/IssueApi~issueClearLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueClearLabels(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueClearLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueClearLabels");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueClearLabels");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueCreateComment operation.
     * @callback moduleapi/IssueApi~issueCreateCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a comment to an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIssueCommentOption} opts.body 
     * @param {module:api/IssueApi~issueCreateCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueCreateComment(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateComment");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueCreateComment");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueCreateIssue operation.
     * @callback moduleapi/IssueApi~issueCreateIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIssueOption} opts.body 
     * @param {module:api/IssueApi~issueCreateIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueCreateIssue(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateIssue");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueCreateLabel operation.
     * @callback moduleapi/IssueApi~issueCreateLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a label
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateLabelOption} opts.body 
     * @param {module:api/IssueApi~issueCreateLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueCreateLabel(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateLabel");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Label;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueCreateMilestone operation.
     * @callback moduleapi/IssueApi~issueCreateMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a milestone
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMilestoneOption} opts.body 
     * @param {module:api/IssueApi~issueCreateMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueCreateMilestone(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueCreateMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueCreateMilestone");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueDeleteComment operation.
     * @callback moduleapi/IssueApi~issueDeleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of comment to delete
     * @param {module:api/IssueApi~issueDeleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteComment(owner, repo, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteComment");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueDeleteCommentDeprecated operation.
     * @callback moduleapi/IssueApi~issueDeleteCommentDeprecatedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index this parameter is ignored
     * @param {Number} id id of comment to delete
     * @param {module:api/IssueApi~issueDeleteCommentDeprecatedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteCommentDeprecated(owner, repo, index, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteCommentDeprecated");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteCommentDeprecated");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteCommentDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteCommentDeprecated");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueDeleteLabel operation.
     * @callback moduleapi/IssueApi~issueDeleteLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a label
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the label to delete
     * @param {module:api/IssueApi~issueDeleteLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteLabel(owner, repo, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteLabel");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueDeleteMilestone operation.
     * @callback moduleapi/IssueApi~issueDeleteMilestoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a milestone
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id the milestone to delete, identified by ID and if not available by name
     * @param {module:api/IssueApi~issueDeleteMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteMilestone(owner, repo, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteMilestone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteMilestone");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueDeleteStopWatch operation.
     * @callback moduleapi/IssueApi~issueDeleteStopWatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an issue&#x27;s existing stopwatch.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to stop the stopwatch on
     * @param {module:api/IssueApi~issueDeleteStopWatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteStopWatch(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteStopWatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteStopWatch");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteStopWatch");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/stopwatch/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueDeleteSubscription operation.
     * @callback moduleapi/IssueApi~issueDeleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe user from issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {String} user user witch unsubscribe
     * @param {module:api/IssueApi~issueDeleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteSubscription(owner, repo, index, user, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteSubscription");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteSubscription");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteSubscription");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling issueDeleteSubscription");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index,'user': user
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueDeleteTime operation.
     * @callback moduleapi/IssueApi~issueDeleteTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific tracked time
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Number} id id of time to delete
     * @param {module:api/IssueApi~issueDeleteTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueDeleteTime(owner, repo, index, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueDeleteTime");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueDeleteTime");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueDeleteTime");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueDeleteTime");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/times/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueEditComment operation.
     * @callback moduleapi/IssueApi~issueEditCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditIssueCommentOption} opts.body 
     * @param {module:api/IssueApi~issueEditCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueEditComment(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditComment");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueEditCommentDeprecated operation.
     * @callback moduleapi/IssueApi~issueEditCommentDeprecatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index this parameter is ignored
     * @param {Number} id id of the comment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditIssueCommentOption} opts.body 
     * @param {module:api/IssueApi~issueEditCommentDeprecatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueEditCommentDeprecated(owner, repo, index, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditCommentDeprecated");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditCommentDeprecated");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueEditCommentDeprecated");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditCommentDeprecated");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/comments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueEditIssue operation.
     * @callback moduleapi/IssueApi~issueEditIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditIssueOption} opts.body 
     * @param {module:api/IssueApi~issueEditIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueEditIssue(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditIssue");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueEditIssue");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueEditIssueDeadline operation.
     * @callback moduleapi/IssueApi~issueEditIssueDeadlineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueDeadline{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to create or update a deadline on
     * @param {Object} opts Optional parameters
     * @param {module:model/EditDeadlineOption} opts.body 
     * @param {module:api/IssueApi~issueEditIssueDeadlineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueEditIssueDeadline(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditIssueDeadline");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditIssueDeadline");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueEditIssueDeadline");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueDeadline;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/deadline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueEditLabel operation.
     * @callback moduleapi/IssueApi~issueEditLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a label
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the label to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditLabelOption} opts.body 
     * @param {module:api/IssueApi~issueEditLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueEditLabel(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditLabel");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Label;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueEditMilestone operation.
     * @callback moduleapi/IssueApi~issueEditMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a milestone
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id the milestone to edit, identified by ID and if not available by name
     * @param {Object} opts Optional parameters
     * @param {module:model/EditMilestoneOption} opts.body 
     * @param {module:api/IssueApi~issueEditMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueEditMilestone(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueEditMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueEditMilestone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueEditMilestone");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetComment operation.
     * @callback moduleapi/IssueApi~issueGetCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a comment
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment
     * @param {module:api/IssueApi~issueGetCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetComment(owner, repo, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetComment");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetComment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetComment");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Comment;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetCommentReactions operation.
     * @callback moduleapi/IssueApi~issueGetCommentReactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of reactions from a comment of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment to edit
     * @param {module:api/IssueApi~issueGetCommentReactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetCommentReactions(owner, repo, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetCommentReactions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetCommentReactions");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetCommentReactions");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetComments operation.
     * @callback moduleapi/IssueApi~issueGetCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all comments on an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since if provided, only comments updated since the specified time are returned.
     * @param {Date} opts.before if provided, only comments updated before the provided time are returned.
     * @param {module:api/IssueApi~issueGetCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetComments(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetComments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetComments");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetComments");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        'since': opts['since'],'before': opts['before']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetIssue operation.
     * @callback moduleapi/IssueApi~issueGetIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to get
     * @param {module:api/IssueApi~issueGetIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetIssue(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetIssue");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetIssue");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetIssue");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetIssueReactions operation.
     * @callback moduleapi/IssueApi~issueGetIssueReactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Reaction>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list reactions of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/IssueApi~issueGetIssueReactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetIssueReactions(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetIssueReactions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetIssueReactions");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetIssueReactions");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Reaction];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetLabel operation.
     * @callback moduleapi/IssueApi~issueGetLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single label
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the label to get
     * @param {module:api/IssueApi~issueGetLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetLabel(owner, repo, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetLabel");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Label;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetLabels operation.
     * @callback moduleapi/IssueApi~issueGetLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an issue&#x27;s labels
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {module:api/IssueApi~issueGetLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetLabels(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetLabels");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueGetLabels");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Label];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetMilestone operation.
     * @callback moduleapi/IssueApi~issueGetMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a milestone
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {String} id the milestone to get, identified by ID and if not available by name
     * @param {module:api/IssueApi~issueGetMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetMilestone(owner, repo, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetMilestone");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetMilestone");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueGetMilestone");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Milestone;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetMilestonesList operation.
     * @callback moduleapi/IssueApi~issueGetMilestonesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Milestone>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of a repository&#x27;s opened milestones
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {String} opts.state Milestone state, Recognised values are open, closed and all. Defaults to \&quot;open\&quot;
     * @param {String} opts.name filter by milestone name
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/IssueApi~issueGetMilestonesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetMilestonesList(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetMilestonesList");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetMilestonesList");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        'state': opts['state'],'name': opts['name'],'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Milestone];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/milestones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueGetRepoComments operation.
     * @callback moduleapi/IssueApi~issueGetRepoCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all comments in a repository
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Date} opts.since if provided, only comments updated since the provided time are returned.
     * @param {Date} opts.before if provided, only comments updated before the provided time are returned.
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/IssueApi~issueGetRepoCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueGetRepoComments(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueGetRepoComments");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueGetRepoComments");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        'since': opts['since'],'before': opts['before'],'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Comment];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueListIssues operation.
     * @callback moduleapi/IssueApi~issueListIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository&#x27;s issues
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.state whether issue is open or closed
     * @param {String} opts.labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded
     * @param {String} opts.q search string
     * @param {module:model/String} opts.type filter by type (issues / pulls) if set
     * @param {String} opts.milestones comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded
     * @param {Date} opts.since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} opts.before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {String} opts.createdBy filter (issues / pulls) created to
     * @param {String} opts.assignedBy filter (issues / pulls) assigned to
     * @param {String} opts.mentionedBy filter (issues / pulls) mentioning to
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/IssueApi~issueListIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueListIssues(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueListIssues");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueListIssues");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        'state': opts['state'],'labels': opts['labels'],'q': opts['q'],'type': opts['type'],'milestones': opts['milestones'],'since': opts['since'],'before': opts['before'],'created_by': opts['createdBy'],'assigned_by': opts['assignedBy'],'mentioned_by': opts['mentionedBy'],'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Issue];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueListLabels operation.
     * @callback moduleapi/IssueApi~issueListLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of a repository&#x27;s labels
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/IssueApi~issueListLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueListLabels(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueListLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueListLabels");
      }

      let pathParams = {
        'owner': owner,'repo': repo
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Label];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issuePostCommentReaction operation.
     * @callback moduleapi/IssueApi~issuePostCommentReactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a reaction to a comment of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} id id of the comment to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/EditReactionOption} opts.body 
     * @param {module:api/IssueApi~issuePostCommentReactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issuePostCommentReaction(owner, repo, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuePostCommentReaction");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuePostCommentReaction");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuePostCommentReaction");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/comments/{id}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issuePostIssueReaction operation.
     * @callback moduleapi/IssueApi~issuePostIssueReactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reaction{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a reaction to an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/EditReactionOption} opts.body 
     * @param {module:api/IssueApi~issuePostIssueReactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issuePostIssueReaction(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issuePostIssueReaction");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issuePostIssueReaction");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issuePostIssueReaction");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Reaction;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueRemoveLabel operation.
     * @callback moduleapi/IssueApi~issueRemoveLabelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a label from an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Number} id id of the label to remove
     * @param {module:api/IssueApi~issueRemoveLabelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueRemoveLabel(owner, repo, index, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueRemoveLabel");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueRemoveLabel");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueRemoveLabel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issueRemoveLabel");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueReplaceLabels operation.
     * @callback moduleapi/IssueApi~issueReplaceLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an issue&#x27;s labels
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {module:model/IssueLabelsOption} opts.body 
     * @param {module:api/IssueApi~issueReplaceLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueReplaceLabels(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueReplaceLabels");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueReplaceLabels");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueReplaceLabels");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Label];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/labels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueResetTime operation.
     * @callback moduleapi/IssueApi~issueResetTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a tracked time of an issue
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to add tracked time to
     * @param {module:api/IssueApi~issueResetTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueResetTime(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueResetTime");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueResetTime");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueResetTime");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/times', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueSearchIssues operation.
     * @callback moduleapi/IssueApi~issueSearchIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for issues across the repositories that the user has access to
     * @param {Object} opts Optional parameters
     * @param {String} opts.state whether issue is open or closed
     * @param {String} opts.labels comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded
     * @param {String} opts.milestones comma separated list of milestone names. Fetch only issues that have any of this milestones. Non existent are discarded
     * @param {String} opts.q search string
     * @param {Number} opts.priorityRepoId repository to prioritize in the results
     * @param {String} opts.type filter by type (issues / pulls) if set
     * @param {Date} opts.since Only show notifications updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} opts.before Only show notifications updated before the given time. This is a timestamp in RFC 3339 format
     * @param {Boolean} opts.assigned filter (issues / pulls) assigned to you, default is false
     * @param {Boolean} opts.created filter (issues / pulls) created by you, default is false
     * @param {Boolean} opts.mentioned filter (issues / pulls) mentioning you, default is false
     * @param {Boolean} opts.reviewRequested filter pulls requesting your review, default is false
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/IssueApi~issueSearchIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueSearchIssues(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'state': opts['state'],'labels': opts['labels'],'milestones': opts['milestones'],'q': opts['q'],'priority_repo_id': opts['priorityRepoId'],'type': opts['type'],'since': opts['since'],'before': opts['before'],'assigned': opts['assigned'],'created': opts['created'],'mentioned': opts['mentioned'],'review_requested': opts['reviewRequested'],'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Issue];

      return this.apiClient.callApi(
        '/repos/issues/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueStartStopWatch operation.
     * @callback moduleapi/IssueApi~issueStartStopWatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start stopwatch on an issue.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to create the stopwatch on
     * @param {module:api/IssueApi~issueStartStopWatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueStartStopWatch(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueStartStopWatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueStartStopWatch");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueStartStopWatch");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/stopwatch/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueStopStopWatch operation.
     * @callback moduleapi/IssueApi~issueStopStopWatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop an issue&#x27;s existing stopwatch.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue to stop the stopwatch on
     * @param {module:api/IssueApi~issueStopStopWatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueStopStopWatch(owner, repo, index, callback) {
      
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueStopStopWatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueStopStopWatch");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueStopStopWatch");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/stopwatch/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueSubscriptions operation.
     * @callback moduleapi/IssueApi~issueSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users who subscribed on an issue.
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/IssueApi~issueSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueSubscriptions(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueSubscriptions");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueSubscriptions");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueSubscriptions");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [User];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the issueTrackedTimes operation.
     * @callback moduleapi/IssueApi~issueTrackedTimesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrackedTime>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List an issue&#x27;s tracked times
     * @param {String} owner owner of the repo
     * @param {String} repo name of the repo
     * @param {Number} index index of the issue
     * @param {Object} opts Optional parameters
     * @param {String} opts.user optional filter by user (available for issue managers)
     * @param {Date} opts.since Only show times updated after the given time. This is a timestamp in RFC 3339 format
     * @param {Date} opts.before Only show times updated before the given time. This is a timestamp in RFC 3339 format
     * @param {Number} opts.page page number of results to return (1-based)
     * @param {Number} opts.limit page size of results
     * @param {module:api/IssueApi~issueTrackedTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    issueTrackedTimes(owner, repo, index, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling issueTrackedTimes");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling issueTrackedTimes");
      }
      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling issueTrackedTimes");
      }

      let pathParams = {
        'owner': owner,'repo': repo,'index': index
      };
      let queryParams = {
        'user': opts['user'],'since': opts['since'],'before': opts['before'],'page': opts['page'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['AccessToken', 'AuthorizationHeaderToken', 'BasicAuth', 'SudoHeader', 'SudoParam', 'TOTPHeader', 'Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TrackedTime];

      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/issues/{index}/times', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}