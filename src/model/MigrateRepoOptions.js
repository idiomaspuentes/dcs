/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The MigrateRepoOptions model module.
 * @module model/MigrateRepoOptions
 * @version 1.15.6a+dcs
 */
export class MigrateRepoOptions {
  /**
   * Constructs a new <code>MigrateRepoOptions</code>.
   * MigrateRepoOptions options for migrating repository&#x27;s this is used to interact with api v1
   * @alias module:model/MigrateRepoOptions
   * @class
   * @param cloneAddr {String} 
   * @param repoName {String} 
   */
  constructor(cloneAddr, repoName) {
    this.cloneAddr = cloneAddr;
    this.repoName = repoName;
  }

  /**
   * Constructs a <code>MigrateRepoOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MigrateRepoOptions} obj Optional instance to populate.
   * @return {module:model/MigrateRepoOptions} The populated <code>MigrateRepoOptions</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MigrateRepoOptions();
      if (data.hasOwnProperty('auth_password'))
        obj.authPassword = ApiClient.convertToType(data['auth_password'], 'String');
      if (data.hasOwnProperty('auth_token'))
        obj.authToken = ApiClient.convertToType(data['auth_token'], 'String');
      if (data.hasOwnProperty('auth_username'))
        obj.authUsername = ApiClient.convertToType(data['auth_username'], 'String');
      if (data.hasOwnProperty('clone_addr'))
        obj.cloneAddr = ApiClient.convertToType(data['clone_addr'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('issues'))
        obj.issues = ApiClient.convertToType(data['issues'], 'Boolean');
      if (data.hasOwnProperty('labels'))
        obj.labels = ApiClient.convertToType(data['labels'], 'Boolean');
      if (data.hasOwnProperty('lfs'))
        obj.lfs = ApiClient.convertToType(data['lfs'], 'Boolean');
      if (data.hasOwnProperty('lfs_endpoint'))
        obj.lfsEndpoint = ApiClient.convertToType(data['lfs_endpoint'], 'String');
      if (data.hasOwnProperty('milestones'))
        obj.milestones = ApiClient.convertToType(data['milestones'], 'Boolean');
      if (data.hasOwnProperty('mirror'))
        obj.mirror = ApiClient.convertToType(data['mirror'], 'Boolean');
      if (data.hasOwnProperty('mirror_interval'))
        obj.mirrorInterval = ApiClient.convertToType(data['mirror_interval'], 'String');
      if (data.hasOwnProperty('private'))
        obj._private = ApiClient.convertToType(data['private'], 'Boolean');
      if (data.hasOwnProperty('pull_requests'))
        obj.pullRequests = ApiClient.convertToType(data['pull_requests'], 'Boolean');
      if (data.hasOwnProperty('releases'))
        obj.releases = ApiClient.convertToType(data['releases'], 'Boolean');
      if (data.hasOwnProperty('repo_name'))
        obj.repoName = ApiClient.convertToType(data['repo_name'], 'String');
      if (data.hasOwnProperty('repo_owner'))
        obj.repoOwner = ApiClient.convertToType(data['repo_owner'], 'String');
      if (data.hasOwnProperty('service'))
        obj.service = ApiClient.convertToType(data['service'], 'String');
      if (data.hasOwnProperty('uid'))
        obj.uid = ApiClient.convertToType(data['uid'], 'Number');
      if (data.hasOwnProperty('wiki'))
        obj.wiki = ApiClient.convertToType(data['wiki'], 'Boolean');
    }
    return obj;
  }
}

/**
 * @member {String} authPassword
 */
MigrateRepoOptions.prototype.authPassword = undefined;

/**
 * @member {String} authToken
 */
MigrateRepoOptions.prototype.authToken = undefined;

/**
 * @member {String} authUsername
 */
MigrateRepoOptions.prototype.authUsername = undefined;

/**
 * @member {String} cloneAddr
 */
MigrateRepoOptions.prototype.cloneAddr = undefined;

/**
 * @member {String} description
 */
MigrateRepoOptions.prototype.description = undefined;

/**
 * @member {Boolean} issues
 */
MigrateRepoOptions.prototype.issues = undefined;

/**
 * @member {Boolean} labels
 */
MigrateRepoOptions.prototype.labels = undefined;

/**
 * @member {Boolean} lfs
 */
MigrateRepoOptions.prototype.lfs = undefined;

/**
 * @member {String} lfsEndpoint
 */
MigrateRepoOptions.prototype.lfsEndpoint = undefined;

/**
 * @member {Boolean} milestones
 */
MigrateRepoOptions.prototype.milestones = undefined;

/**
 * @member {Boolean} mirror
 */
MigrateRepoOptions.prototype.mirror = undefined;

/**
 * @member {String} mirrorInterval
 */
MigrateRepoOptions.prototype.mirrorInterval = undefined;

/**
 * @member {Boolean} _private
 */
MigrateRepoOptions.prototype._private = undefined;

/**
 * @member {Boolean} pullRequests
 */
MigrateRepoOptions.prototype.pullRequests = undefined;

/**
 * @member {Boolean} releases
 */
MigrateRepoOptions.prototype.releases = undefined;

/**
 * @member {String} repoName
 */
MigrateRepoOptions.prototype.repoName = undefined;

/**
 * Name of User or Organisation who will own Repo after migration
 * @member {String} repoOwner
 */
MigrateRepoOptions.prototype.repoOwner = undefined;

/**
 * Allowed values for the <code>service</code> property.
 * @enum {String}
 * @readonly
 */
MigrateRepoOptions.ServiceEnum = {
  /**
   * value: "git"
   * @const
   */
  git: "git",

  /**
   * value: "github"
   * @const
   */
  github: "github",

  /**
   * value: "gitea"
   * @const
   */
  gitea: "gitea",

  /**
   * value: "gitlab"
   * @const
   */
  gitlab: "gitlab"
};
/**
 * @member {module:model/MigrateRepoOptions.ServiceEnum} service
 */
MigrateRepoOptions.prototype.service = undefined;

/**
 * deprecated (only for backwards compatibility)
 * @member {Number} uid
 */
MigrateRepoOptions.prototype.uid = undefined;

/**
 * @member {Boolean} wiki
 */
MigrateRepoOptions.prototype.wiki = undefined;

