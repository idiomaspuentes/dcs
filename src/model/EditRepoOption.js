/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {ExternalTracker} from './ExternalTracker';
import {ExternalWiki} from './ExternalWiki';
import {InternalTracker} from './InternalTracker';

/**
 * The EditRepoOption model module.
 * @module model/EditRepoOption
 * @version 1.15.6a+dcs
 */
export class EditRepoOption {
  /**
   * Constructs a new <code>EditRepoOption</code>.
   * EditRepoOption options when editing a repository&#x27;s properties
   * @alias module:model/EditRepoOption
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>EditRepoOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EditRepoOption} obj Optional instance to populate.
   * @return {module:model/EditRepoOption} The populated <code>EditRepoOption</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new EditRepoOption();
      if (data.hasOwnProperty('allow_manual_merge'))
        obj.allowManualMerge = ApiClient.convertToType(data['allow_manual_merge'], 'Boolean');
      if (data.hasOwnProperty('allow_merge_commits'))
        obj.allowMergeCommits = ApiClient.convertToType(data['allow_merge_commits'], 'Boolean');
      if (data.hasOwnProperty('allow_rebase'))
        obj.allowRebase = ApiClient.convertToType(data['allow_rebase'], 'Boolean');
      if (data.hasOwnProperty('allow_rebase_explicit'))
        obj.allowRebaseExplicit = ApiClient.convertToType(data['allow_rebase_explicit'], 'Boolean');
      if (data.hasOwnProperty('allow_squash_merge'))
        obj.allowSquashMerge = ApiClient.convertToType(data['allow_squash_merge'], 'Boolean');
      if (data.hasOwnProperty('archived'))
        obj.archived = ApiClient.convertToType(data['archived'], 'Boolean');
      if (data.hasOwnProperty('autodetect_manual_merge'))
        obj.autodetectManualMerge = ApiClient.convertToType(data['autodetect_manual_merge'], 'Boolean');
      if (data.hasOwnProperty('default_branch'))
        obj.defaultBranch = ApiClient.convertToType(data['default_branch'], 'String');
      if (data.hasOwnProperty('default_delete_branch_after_merge'))
        obj.defaultDeleteBranchAfterMerge = ApiClient.convertToType(data['default_delete_branch_after_merge'], 'Boolean');
      if (data.hasOwnProperty('default_merge_style'))
        obj.defaultMergeStyle = ApiClient.convertToType(data['default_merge_style'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('external_tracker'))
        obj.externalTracker = ExternalTracker.constructFromObject(data['external_tracker']);
      if (data.hasOwnProperty('external_wiki'))
        obj.externalWiki = ExternalWiki.constructFromObject(data['external_wiki']);
      if (data.hasOwnProperty('has_issues'))
        obj.hasIssues = ApiClient.convertToType(data['has_issues'], 'Boolean');
      if (data.hasOwnProperty('has_projects'))
        obj.hasProjects = ApiClient.convertToType(data['has_projects'], 'Boolean');
      if (data.hasOwnProperty('has_pull_requests'))
        obj.hasPullRequests = ApiClient.convertToType(data['has_pull_requests'], 'Boolean');
      if (data.hasOwnProperty('has_wiki'))
        obj.hasWiki = ApiClient.convertToType(data['has_wiki'], 'Boolean');
      if (data.hasOwnProperty('ignore_whitespace_conflicts'))
        obj.ignoreWhitespaceConflicts = ApiClient.convertToType(data['ignore_whitespace_conflicts'], 'Boolean');
      if (data.hasOwnProperty('internal_tracker'))
        obj.internalTracker = InternalTracker.constructFromObject(data['internal_tracker']);
      if (data.hasOwnProperty('mirror_interval'))
        obj.mirrorInterval = ApiClient.convertToType(data['mirror_interval'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('private'))
        obj._private = ApiClient.convertToType(data['private'], 'Boolean');
      if (data.hasOwnProperty('template'))
        obj.template = ApiClient.convertToType(data['template'], 'Boolean');
      if (data.hasOwnProperty('website'))
        obj.website = ApiClient.convertToType(data['website'], 'String');
    }
    return obj;
  }
}

/**
 * either `true` to allow mark pr as merged manually, or `false` to prevent it. `has_pull_requests` must be `true`.
 * @member {Boolean} allowManualMerge
 */
EditRepoOption.prototype.allowManualMerge = undefined;

/**
 * either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. `has_pull_requests` must be `true`.
 * @member {Boolean} allowMergeCommits
 */
EditRepoOption.prototype.allowMergeCommits = undefined;

/**
 * either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. `has_pull_requests` must be `true`.
 * @member {Boolean} allowRebase
 */
EditRepoOption.prototype.allowRebase = undefined;

/**
 * either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits. `has_pull_requests` must be `true`.
 * @member {Boolean} allowRebaseExplicit
 */
EditRepoOption.prototype.allowRebaseExplicit = undefined;

/**
 * either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. `has_pull_requests` must be `true`.
 * @member {Boolean} allowSquashMerge
 */
EditRepoOption.prototype.allowSquashMerge = undefined;

/**
 * set to `true` to archive this repository.
 * @member {Boolean} archived
 */
EditRepoOption.prototype.archived = undefined;

/**
 * either `true` to enable AutodetectManualMerge, or `false` to prevent it. `has_pull_requests` must be `true`, Note: In some special cases, misjudgments can occur.
 * @member {Boolean} autodetectManualMerge
 */
EditRepoOption.prototype.autodetectManualMerge = undefined;

/**
 * sets the default branch for this repository.
 * @member {String} defaultBranch
 */
EditRepoOption.prototype.defaultBranch = undefined;

/**
 * set to `true` to delete pr branch after merge by default
 * @member {Boolean} defaultDeleteBranchAfterMerge
 */
EditRepoOption.prototype.defaultDeleteBranchAfterMerge = undefined;

/**
 * set to a merge style to be used by this repository: \"merge\", \"rebase\", \"rebase-merge\", or \"squash\". `has_pull_requests` must be `true`.
 * @member {String} defaultMergeStyle
 */
EditRepoOption.prototype.defaultMergeStyle = undefined;

/**
 * a short description of the repository.
 * @member {String} description
 */
EditRepoOption.prototype.description = undefined;

/**
 * @member {module:model/ExternalTracker} externalTracker
 */
EditRepoOption.prototype.externalTracker = undefined;

/**
 * @member {module:model/ExternalWiki} externalWiki
 */
EditRepoOption.prototype.externalWiki = undefined;

/**
 * either `true` to enable issues for this repository or `false` to disable them.
 * @member {Boolean} hasIssues
 */
EditRepoOption.prototype.hasIssues = undefined;

/**
 * either `true` to enable project unit, or `false` to disable them.
 * @member {Boolean} hasProjects
 */
EditRepoOption.prototype.hasProjects = undefined;

/**
 * either `true` to allow pull requests, or `false` to prevent pull request.
 * @member {Boolean} hasPullRequests
 */
EditRepoOption.prototype.hasPullRequests = undefined;

/**
 * either `true` to enable the wiki for this repository or `false` to disable it.
 * @member {Boolean} hasWiki
 */
EditRepoOption.prototype.hasWiki = undefined;

/**
 * either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace. `has_pull_requests` must be `true`.
 * @member {Boolean} ignoreWhitespaceConflicts
 */
EditRepoOption.prototype.ignoreWhitespaceConflicts = undefined;

/**
 * @member {module:model/InternalTracker} internalTracker
 */
EditRepoOption.prototype.internalTracker = undefined;

/**
 * set to a string like `8h30m0s` to set the mirror interval time
 * @member {String} mirrorInterval
 */
EditRepoOption.prototype.mirrorInterval = undefined;

/**
 * name of the repository
 * @member {String} name
 */
EditRepoOption.prototype.name = undefined;

/**
 * either `true` to make the repository private or `false` to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.
 * @member {Boolean} _private
 */
EditRepoOption.prototype._private = undefined;

/**
 * either `true` to make this repository a template or `false` to make it a normal repository
 * @member {Boolean} template
 */
EditRepoOption.prototype.template = undefined;

/**
 * a URL with more information about the repository.
 * @member {String} website
 */
EditRepoOption.prototype.website = undefined;

