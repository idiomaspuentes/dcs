/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {FileLinksResponse} from './FileLinksResponse';

/**
 * The ContentsResponse model module.
 * @module model/ContentsResponse
 * @version 1.15.6a+dcs
 */
export class ContentsResponse {
  /**
   * Constructs a new <code>ContentsResponse</code>.
   * ContentsResponse contains information about a repo&#x27;s entry&#x27;s (dir, file, symlink, submodule) metadata and content
   * @alias module:model/ContentsResponse
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ContentsResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ContentsResponse} obj Optional instance to populate.
   * @return {module:model/ContentsResponse} The populated <code>ContentsResponse</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ContentsResponse();
      if (data.hasOwnProperty('_links'))
        obj.links = FileLinksResponse.constructFromObject(data['_links']);
      if (data.hasOwnProperty('content'))
        obj.content = ApiClient.convertToType(data['content'], 'String');
      if (data.hasOwnProperty('download_url'))
        obj.downloadUrl = ApiClient.convertToType(data['download_url'], 'String');
      if (data.hasOwnProperty('encoding'))
        obj.encoding = ApiClient.convertToType(data['encoding'], 'String');
      if (data.hasOwnProperty('git_url'))
        obj.gitUrl = ApiClient.convertToType(data['git_url'], 'String');
      if (data.hasOwnProperty('html_url'))
        obj.htmlUrl = ApiClient.convertToType(data['html_url'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
      if (data.hasOwnProperty('sha'))
        obj.sha = ApiClient.convertToType(data['sha'], 'String');
      if (data.hasOwnProperty('size'))
        obj.size = ApiClient.convertToType(data['size'], 'Number');
      if (data.hasOwnProperty('submodule_git_url'))
        obj.submoduleGitUrl = ApiClient.convertToType(data['submodule_git_url'], 'String');
      if (data.hasOwnProperty('target'))
        obj.target = ApiClient.convertToType(data['target'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
    }
    return obj;
  }
}

/**
 * @member {module:model/FileLinksResponse} links
 */
ContentsResponse.prototype.links = undefined;

/**
 * `content` is populated when `type` is `file`, otherwise null
 * @member {String} content
 */
ContentsResponse.prototype.content = undefined;

/**
 * @member {String} downloadUrl
 */
ContentsResponse.prototype.downloadUrl = undefined;

/**
 * `encoding` is populated when `type` is `file`, otherwise null
 * @member {String} encoding
 */
ContentsResponse.prototype.encoding = undefined;

/**
 * @member {String} gitUrl
 */
ContentsResponse.prototype.gitUrl = undefined;

/**
 * @member {String} htmlUrl
 */
ContentsResponse.prototype.htmlUrl = undefined;

/**
 * @member {String} name
 */
ContentsResponse.prototype.name = undefined;

/**
 * @member {String} path
 */
ContentsResponse.prototype.path = undefined;

/**
 * @member {String} sha
 */
ContentsResponse.prototype.sha = undefined;

/**
 * @member {Number} size
 */
ContentsResponse.prototype.size = undefined;

/**
 * `submodule_git_url` is populated when `type` is `submodule`, otherwise null
 * @member {String} submoduleGitUrl
 */
ContentsResponse.prototype.submoduleGitUrl = undefined;

/**
 * `target` is populated when `type` is `symlink`, otherwise null
 * @member {String} target
 */
ContentsResponse.prototype.target = undefined;

/**
 * `type` will be `file`, `dir`, `symlink`, or `submodule`
 * @member {String} type
 */
ContentsResponse.prototype.type = undefined;

/**
 * @member {String} url
 */
ContentsResponse.prototype.url = undefined;

