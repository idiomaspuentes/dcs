/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The GenerateRepoOption model module.
 * @module model/GenerateRepoOption
 * @version 1.15.6a+dcs
 */
export class GenerateRepoOption {
  /**
   * Constructs a new <code>GenerateRepoOption</code>.
   * GenerateRepoOption options when creating repository using a template
   * @alias module:model/GenerateRepoOption
   * @class
   * @param name {String} Name of the repository to create
   * @param owner {String} The organization or person who will own the new repository
   */
  constructor(name, owner) {
    this.name = name;
    this.owner = owner;
  }

  /**
   * Constructs a <code>GenerateRepoOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GenerateRepoOption} obj Optional instance to populate.
   * @return {module:model/GenerateRepoOption} The populated <code>GenerateRepoOption</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GenerateRepoOption();
      if (data.hasOwnProperty('avatar'))
        obj.avatar = ApiClient.convertToType(data['avatar'], 'Boolean');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('git_content'))
        obj.gitContent = ApiClient.convertToType(data['git_content'], 'Boolean');
      if (data.hasOwnProperty('git_hooks'))
        obj.gitHooks = ApiClient.convertToType(data['git_hooks'], 'Boolean');
      if (data.hasOwnProperty('labels'))
        obj.labels = ApiClient.convertToType(data['labels'], 'Boolean');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('owner'))
        obj.owner = ApiClient.convertToType(data['owner'], 'String');
      if (data.hasOwnProperty('private'))
        obj._private = ApiClient.convertToType(data['private'], 'Boolean');
      if (data.hasOwnProperty('topics'))
        obj.topics = ApiClient.convertToType(data['topics'], 'Boolean');
      if (data.hasOwnProperty('webhooks'))
        obj.webhooks = ApiClient.convertToType(data['webhooks'], 'Boolean');
    }
    return obj;
  }
}

/**
 * include avatar of the template repo
 * @member {Boolean} avatar
 */
GenerateRepoOption.prototype.avatar = undefined;

/**
 * Description of the repository to create
 * @member {String} description
 */
GenerateRepoOption.prototype.description = undefined;

/**
 * include git content of default branch in template repo
 * @member {Boolean} gitContent
 */
GenerateRepoOption.prototype.gitContent = undefined;

/**
 * include git hooks in template repo
 * @member {Boolean} gitHooks
 */
GenerateRepoOption.prototype.gitHooks = undefined;

/**
 * include labels in template repo
 * @member {Boolean} labels
 */
GenerateRepoOption.prototype.labels = undefined;

/**
 * Name of the repository to create
 * @member {String} name
 */
GenerateRepoOption.prototype.name = undefined;

/**
 * The organization or person who will own the new repository
 * @member {String} owner
 */
GenerateRepoOption.prototype.owner = undefined;

/**
 * Whether the repository is private
 * @member {Boolean} _private
 */
GenerateRepoOption.prototype._private = undefined;

/**
 * include topics in template repo
 * @member {Boolean} topics
 */
GenerateRepoOption.prototype.topics = undefined;

/**
 * include webhooks in template repo
 * @member {Boolean} webhooks
 */
GenerateRepoOption.prototype.webhooks = undefined;

