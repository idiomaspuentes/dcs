/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The CreateRepoOption model module.
 * @module model/CreateRepoOption
 * @version 1.15.6a+dcs
 */
export class CreateRepoOption {
  /**
   * Constructs a new <code>CreateRepoOption</code>.
   * CreateRepoOption options when creating repository
   * @alias module:model/CreateRepoOption
   * @class
   * @param name {String} Name of the repository to create
   */
  constructor(name) {
    this.name = name;
  }

  /**
   * Constructs a <code>CreateRepoOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateRepoOption} obj Optional instance to populate.
   * @return {module:model/CreateRepoOption} The populated <code>CreateRepoOption</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CreateRepoOption();
      if (data.hasOwnProperty('auto_init'))
        obj.autoInit = ApiClient.convertToType(data['auto_init'], 'Boolean');
      if (data.hasOwnProperty('default_branch'))
        obj.defaultBranch = ApiClient.convertToType(data['default_branch'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('gitignores'))
        obj.gitignores = ApiClient.convertToType(data['gitignores'], 'String');
      if (data.hasOwnProperty('issue_labels'))
        obj.issueLabels = ApiClient.convertToType(data['issue_labels'], 'String');
      if (data.hasOwnProperty('license'))
        obj.license = ApiClient.convertToType(data['license'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('private'))
        obj._private = ApiClient.convertToType(data['private'], 'Boolean');
      if (data.hasOwnProperty('readme'))
        obj.readme = ApiClient.convertToType(data['readme'], 'String');
      if (data.hasOwnProperty('template'))
        obj.template = ApiClient.convertToType(data['template'], 'Boolean');
      if (data.hasOwnProperty('trust_model'))
        obj.trustModel = ApiClient.convertToType(data['trust_model'], 'String');
    }
    return obj;
  }
}

/**
 * Whether the repository should be auto-intialized?
 * @member {Boolean} autoInit
 */
CreateRepoOption.prototype.autoInit = undefined;

/**
 * DefaultBranch of the repository (used when initializes and in template)
 * @member {String} defaultBranch
 */
CreateRepoOption.prototype.defaultBranch = undefined;

/**
 * Description of the repository to create
 * @member {String} description
 */
CreateRepoOption.prototype.description = undefined;

/**
 * Gitignores to use
 * @member {String} gitignores
 */
CreateRepoOption.prototype.gitignores = undefined;

/**
 * Label-Set to use
 * @member {String} issueLabels
 */
CreateRepoOption.prototype.issueLabels = undefined;

/**
 * License to use
 * @member {String} license
 */
CreateRepoOption.prototype.license = undefined;

/**
 * Name of the repository to create
 * @member {String} name
 */
CreateRepoOption.prototype.name = undefined;

/**
 * Whether the repository is private
 * @member {Boolean} _private
 */
CreateRepoOption.prototype._private = undefined;

/**
 * Readme of the repository to create
 * @member {String} readme
 */
CreateRepoOption.prototype.readme = undefined;

/**
 * Whether the repository is template
 * @member {Boolean} template
 */
CreateRepoOption.prototype.template = undefined;

/**
 * Allowed values for the <code>trustModel</code> property.
 * @enum {String}
 * @readonly
 */
CreateRepoOption.TrustModelEnum = {
  /**
   * value: "default"
   * @const
   */
  _default: "default",

  /**
   * value: "collaborator"
   * @const
   */
  collaborator: "collaborator",

  /**
   * value: "committer"
   * @const
   */
  committer: "committer",

  /**
   * value: "collaboratorcommitter"
   * @const
   */
  collaboratorcommitter: "collaboratorcommitter"
};
/**
 * TrustModel of the repository
 * @member {module:model/CreateRepoOption.TrustModelEnum} trustModel
 */
CreateRepoOption.prototype.trustModel = undefined;

