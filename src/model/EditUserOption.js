/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The EditUserOption model module.
 * @module model/EditUserOption
 * @version 1.15.6a+dcs
 */
export class EditUserOption {
  /**
   * Constructs a new <code>EditUserOption</code>.
   * EditUserOption edit user options
   * @alias module:model/EditUserOption
   * @class
   * @param loginName {String} 
   * @param sourceId {Number} 
   */
  constructor(loginName, sourceId) {
    this.loginName = loginName;
    this.sourceId = sourceId;
  }

  /**
   * Constructs a <code>EditUserOption</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EditUserOption} obj Optional instance to populate.
   * @return {module:model/EditUserOption} The populated <code>EditUserOption</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new EditUserOption();
      if (data.hasOwnProperty('active'))
        obj.active = ApiClient.convertToType(data['active'], 'Boolean');
      if (data.hasOwnProperty('admin'))
        obj.admin = ApiClient.convertToType(data['admin'], 'Boolean');
      if (data.hasOwnProperty('allow_create_organization'))
        obj.allowCreateOrganization = ApiClient.convertToType(data['allow_create_organization'], 'Boolean');
      if (data.hasOwnProperty('allow_git_hook'))
        obj.allowGitHook = ApiClient.convertToType(data['allow_git_hook'], 'Boolean');
      if (data.hasOwnProperty('allow_import_local'))
        obj.allowImportLocal = ApiClient.convertToType(data['allow_import_local'], 'Boolean');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('email'))
        obj.email = ApiClient.convertToType(data['email'], 'String');
      if (data.hasOwnProperty('full_name'))
        obj.fullName = ApiClient.convertToType(data['full_name'], 'String');
      if (data.hasOwnProperty('location'))
        obj.location = ApiClient.convertToType(data['location'], 'String');
      if (data.hasOwnProperty('login_name'))
        obj.loginName = ApiClient.convertToType(data['login_name'], 'String');
      if (data.hasOwnProperty('max_repo_creation'))
        obj.maxRepoCreation = ApiClient.convertToType(data['max_repo_creation'], 'Number');
      if (data.hasOwnProperty('must_change_password'))
        obj.mustChangePassword = ApiClient.convertToType(data['must_change_password'], 'Boolean');
      if (data.hasOwnProperty('password'))
        obj.password = ApiClient.convertToType(data['password'], 'String');
      if (data.hasOwnProperty('prohibit_login'))
        obj.prohibitLogin = ApiClient.convertToType(data['prohibit_login'], 'Boolean');
      if (data.hasOwnProperty('restricted'))
        obj.restricted = ApiClient.convertToType(data['restricted'], 'Boolean');
      if (data.hasOwnProperty('source_id'))
        obj.sourceId = ApiClient.convertToType(data['source_id'], 'Number');
      if (data.hasOwnProperty('visibility'))
        obj.visibility = ApiClient.convertToType(data['visibility'], 'String');
      if (data.hasOwnProperty('website'))
        obj.website = ApiClient.convertToType(data['website'], 'String');
    }
    return obj;
  }
}

/**
 * @member {Boolean} active
 */
EditUserOption.prototype.active = undefined;

/**
 * @member {Boolean} admin
 */
EditUserOption.prototype.admin = undefined;

/**
 * @member {Boolean} allowCreateOrganization
 */
EditUserOption.prototype.allowCreateOrganization = undefined;

/**
 * @member {Boolean} allowGitHook
 */
EditUserOption.prototype.allowGitHook = undefined;

/**
 * @member {Boolean} allowImportLocal
 */
EditUserOption.prototype.allowImportLocal = undefined;

/**
 * @member {String} description
 */
EditUserOption.prototype.description = undefined;

/**
 * @member {String} email
 */
EditUserOption.prototype.email = undefined;

/**
 * @member {String} fullName
 */
EditUserOption.prototype.fullName = undefined;

/**
 * @member {String} location
 */
EditUserOption.prototype.location = undefined;

/**
 * @member {String} loginName
 */
EditUserOption.prototype.loginName = undefined;

/**
 * @member {Number} maxRepoCreation
 */
EditUserOption.prototype.maxRepoCreation = undefined;

/**
 * @member {Boolean} mustChangePassword
 */
EditUserOption.prototype.mustChangePassword = undefined;

/**
 * @member {String} password
 */
EditUserOption.prototype.password = undefined;

/**
 * @member {Boolean} prohibitLogin
 */
EditUserOption.prototype.prohibitLogin = undefined;

/**
 * @member {Boolean} restricted
 */
EditUserOption.prototype.restricted = undefined;

/**
 * @member {Number} sourceId
 */
EditUserOption.prototype.sourceId = undefined;

/**
 * @member {String} visibility
 */
EditUserOption.prototype.visibility = undefined;

/**
 * @member {String} website
 */
EditUserOption.prototype.website = undefined;

