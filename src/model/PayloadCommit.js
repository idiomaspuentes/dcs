/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {PayloadCommitVerification} from './PayloadCommitVerification';
import {PayloadUser} from './PayloadUser';

/**
 * The PayloadCommit model module.
 * @module model/PayloadCommit
 * @version 1.15.6a+dcs
 */
export class PayloadCommit {
  /**
   * Constructs a new <code>PayloadCommit</code>.
   * PayloadCommit represents a commit
   * @alias module:model/PayloadCommit
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>PayloadCommit</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PayloadCommit} obj Optional instance to populate.
   * @return {module:model/PayloadCommit} The populated <code>PayloadCommit</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new PayloadCommit();
      if (data.hasOwnProperty('added'))
        obj.added = ApiClient.convertToType(data['added'], ['String']);
      if (data.hasOwnProperty('author'))
        obj.author = PayloadUser.constructFromObject(data['author']);
      if (data.hasOwnProperty('committer'))
        obj.committer = PayloadUser.constructFromObject(data['committer']);
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('message'))
        obj.message = ApiClient.convertToType(data['message'], 'String');
      if (data.hasOwnProperty('modified'))
        obj.modified = ApiClient.convertToType(data['modified'], ['String']);
      if (data.hasOwnProperty('removed'))
        obj.removed = ApiClient.convertToType(data['removed'], ['String']);
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'Date');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('verification'))
        obj.verification = PayloadCommitVerification.constructFromObject(data['verification']);
    }
    return obj;
  }
}

/**
 * @member {Array.<String>} added
 */
PayloadCommit.prototype.added = undefined;

/**
 * @member {module:model/PayloadUser} author
 */
PayloadCommit.prototype.author = undefined;

/**
 * @member {module:model/PayloadUser} committer
 */
PayloadCommit.prototype.committer = undefined;

/**
 * sha1 hash of the commit
 * @member {String} id
 */
PayloadCommit.prototype.id = undefined;

/**
 * @member {String} message
 */
PayloadCommit.prototype.message = undefined;

/**
 * @member {Array.<String>} modified
 */
PayloadCommit.prototype.modified = undefined;

/**
 * @member {Array.<String>} removed
 */
PayloadCommit.prototype.removed = undefined;

/**
 * @member {Date} timestamp
 */
PayloadCommit.prototype.timestamp = undefined;

/**
 * @member {String} url
 */
PayloadCommit.prototype.url = undefined;

/**
 * @member {module:model/PayloadCommitVerification} verification
 */
PayloadCommit.prototype.verification = undefined;

