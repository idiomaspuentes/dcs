/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new dcs.RepositoryApi();
  });

  describe('(package)', function() {
    describe('RepositoryApi', function() {
      describe('createCurrentUserRepo', function() {
        it('should call createCurrentUserRepo successfully', function(done) {
          // TODO: uncomment, update parameter values for createCurrentUserRepo call and complete the assertions
          /*
          var opts = {};

          instance.createCurrentUserRepo(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createFork', function() {
        it('should call createFork successfully', function(done) {
          // TODO: uncomment, update parameter values for createFork call and complete the assertions
          /*
          var opts = {};

          instance.createFork(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generateRepo', function() {
        it('should call generateRepo successfully', function(done) {
          // TODO: uncomment, update parameter values for generateRepo call and complete the assertions
          /*
          var opts = {};

          instance.generateRepo(templateOwner, templateRepo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAnnotatedTag', function() {
        it('should call getAnnotatedTag successfully', function(done) {
          // TODO: uncomment, update parameter values for getAnnotatedTag call and complete the assertions
          /*

          instance.getAnnotatedTag(owner, repo, sha, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.AnnotatedTag);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBlob', function() {
        it('should call getBlob successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlob call and complete the assertions
          /*

          instance.getBlob(owner, repo, sha, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.GitBlobResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTree', function() {
        it('should call getTree successfully', function(done) {
          // TODO: uncomment, update parameter values for getTree call and complete the assertions
          /*
          var opts = {};

          instance.getTree(owner, repo, sha, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.GitTreeResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listForks', function() {
        it('should call listForks successfully', function(done) {
          // TODO: uncomment, update parameter values for listForks call and complete the assertions
          /*
          var opts = {};

          instance.listForks(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoAddCollaborator', function() {
        it('should call repoAddCollaborator successfully', function(done) {
          // TODO: uncomment, update parameter values for repoAddCollaborator call
          /*
          var opts = {};

          instance.repoAddCollaborator(owner, repo, collaborator, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoAddTeam', function() {
        it('should call repoAddTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for repoAddTeam call
          /*

          instance.repoAddTeam(owner, repo, team, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoAddTopc', function() {
        it('should call repoAddTopc successfully', function(done) {
          // TODO: uncomment, update parameter values for repoAddTopc call
          /*

          instance.repoAddTopc(owner, repo, topic, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCheckCollaborator', function() {
        it('should call repoCheckCollaborator successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCheckCollaborator call
          /*

          instance.repoCheckCollaborator(owner, repo, collaborator, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCheckTeam', function() {
        it('should call repoCheckTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCheckTeam call and complete the assertions
          /*

          instance.repoCheckTeam(owner, repo, team, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Team);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateBranch', function() {
        it('should call repoCreateBranch successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateBranch call and complete the assertions
          /*
          var opts = {};

          instance.repoCreateBranch(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Branch);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateBranchProtection', function() {
        it('should call repoCreateBranchProtection successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateBranchProtection call and complete the assertions
          /*
          var opts = {};

          instance.repoCreateBranchProtection(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.BranchProtection);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateFile', function() {
        it('should call repoCreateFile successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateFile call and complete the assertions
          /*

          instance.repoCreateFile(body, owner, repo, filepath, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.FileResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateHook', function() {
        it('should call repoCreateHook successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateHook call and complete the assertions
          /*
          var opts = {};

          instance.repoCreateHook(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Hook);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateKey', function() {
        it('should call repoCreateKey successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateKey call and complete the assertions
          /*
          var opts = {};

          instance.repoCreateKey(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.DeployKey);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreatePullRequest', function() {
        it('should call repoCreatePullRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreatePullRequest call and complete the assertions
          /*
          var opts = {};

          instance.repoCreatePullRequest(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PullRequest);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreatePullReview', function() {
        it('should call repoCreatePullReview successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreatePullReview call and complete the assertions
          /*

          instance.repoCreatePullReview(body, owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PullReview);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreatePullReviewRequests', function() {
        it('should call repoCreatePullReviewRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreatePullReviewRequests call and complete the assertions
          /*

          instance.repoCreatePullReviewRequests(body, owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.PullReview);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateRelease', function() {
        it('should call repoCreateRelease successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateRelease call and complete the assertions
          /*
          var opts = {};

          instance.repoCreateRelease(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Release);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateReleaseAttachment', function() {
        it('should call repoCreateReleaseAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateReleaseAttachment call and complete the assertions
          /*
          var opts = {};

          instance.repoCreateReleaseAttachment(attachment, owner, repo, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Attachment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateStatus', function() {
        it('should call repoCreateStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateStatus call and complete the assertions
          /*
          var opts = {};

          instance.repoCreateStatus(owner, repo, sha, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.CommitStatus);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoCreateTag', function() {
        it('should call repoCreateTag successfully', function(done) {
          // TODO: uncomment, update parameter values for repoCreateTag call and complete the assertions
          /*
          var opts = {};

          instance.repoCreateTag(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Tag);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDelete', function() {
        it('should call repoDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDelete call
          /*

          instance.repoDelete(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteBranch', function() {
        it('should call repoDeleteBranch successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteBranch call
          /*

          instance.repoDeleteBranch(owner, repo, branch, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteBranchProtection', function() {
        it('should call repoDeleteBranchProtection successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteBranchProtection call
          /*

          instance.repoDeleteBranchProtection(owner, repo, name, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteCollaborator', function() {
        it('should call repoDeleteCollaborator successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteCollaborator call
          /*

          instance.repoDeleteCollaborator(owner, repo, collaborator, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteGitHook', function() {
        it('should call repoDeleteGitHook successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteGitHook call
          /*

          instance.repoDeleteGitHook(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteHook', function() {
        it('should call repoDeleteHook successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteHook call
          /*

          instance.repoDeleteHook(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteKey', function() {
        it('should call repoDeleteKey successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteKey call
          /*

          instance.repoDeleteKey(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeletePullReview', function() {
        it('should call repoDeletePullReview successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeletePullReview call
          /*

          instance.repoDeletePullReview(owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteRelease', function() {
        it('should call repoDeleteRelease successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteRelease call
          /*

          instance.repoDeleteRelease(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteReleaseAttachment', function() {
        it('should call repoDeleteReleaseAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteReleaseAttachment call
          /*

          instance.repoDeleteReleaseAttachment(owner, repo, id, attachmentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteReleaseByTag', function() {
        it('should call repoDeleteReleaseByTag successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteReleaseByTag call
          /*

          instance.repoDeleteReleaseByTag(owner, repo, tag, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteTag', function() {
        it('should call repoDeleteTag successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteTag call
          /*

          instance.repoDeleteTag(owner, repo, tag, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteTeam', function() {
        it('should call repoDeleteTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteTeam call
          /*

          instance.repoDeleteTeam(owner, repo, team, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDeleteTopic', function() {
        it('should call repoDeleteTopic successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDeleteTopic call
          /*

          instance.repoDeleteTopic(owner, repo, topic, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDismissPullReview', function() {
        it('should call repoDismissPullReview successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDismissPullReview call and complete the assertions
          /*

          instance.repoDismissPullReview(body, owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PullReview);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDownloadPullDiff', function() {
        it('should call repoDownloadPullDiff successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDownloadPullDiff call and complete the assertions
          /*

          instance.repoDownloadPullDiff(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoDownloadPullPatch', function() {
        it('should call repoDownloadPullPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for repoDownloadPullPatch call and complete the assertions
          /*

          instance.repoDownloadPullPatch(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoEdit', function() {
        it('should call repoEdit successfully', function(done) {
          // TODO: uncomment, update parameter values for repoEdit call and complete the assertions
          /*
          var opts = {};

          instance.repoEdit(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoEditBranchProtection', function() {
        it('should call repoEditBranchProtection successfully', function(done) {
          // TODO: uncomment, update parameter values for repoEditBranchProtection call and complete the assertions
          /*
          var opts = {};

          instance.repoEditBranchProtection(owner, repo, name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.BranchProtection);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoEditGitHook', function() {
        it('should call repoEditGitHook successfully', function(done) {
          // TODO: uncomment, update parameter values for repoEditGitHook call and complete the assertions
          /*
          var opts = {};

          instance.repoEditGitHook(owner, repo, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.GitHook);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoEditHook', function() {
        it('should call repoEditHook successfully', function(done) {
          // TODO: uncomment, update parameter values for repoEditHook call and complete the assertions
          /*
          var opts = {};

          instance.repoEditHook(owner, repo, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Hook);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoEditPullRequest', function() {
        it('should call repoEditPullRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for repoEditPullRequest call and complete the assertions
          /*
          var opts = {};

          instance.repoEditPullRequest(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PullRequest);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoEditRelease', function() {
        it('should call repoEditRelease successfully', function(done) {
          // TODO: uncomment, update parameter values for repoEditRelease call and complete the assertions
          /*
          var opts = {};

          instance.repoEditRelease(owner, repo, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Release);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoEditReleaseAttachment', function() {
        it('should call repoEditReleaseAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for repoEditReleaseAttachment call and complete the assertions
          /*
          var opts = {};

          instance.repoEditReleaseAttachment(owner, repo, id, attachmentId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Attachment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGet', function() {
        it('should call repoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGet call and complete the assertions
          /*

          instance.repoGet(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetAllCommits', function() {
        it('should call repoGetAllCommits successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetAllCommits call and complete the assertions
          /*
          var opts = {};

          instance.repoGetAllCommits(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Commit);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetArchive', function() {
        it('should call repoGetArchive successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetArchive call
          /*

          instance.repoGetArchive(owner, repo, archive, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetAssignees', function() {
        it('should call repoGetAssignees successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetAssignees call and complete the assertions
          /*

          instance.repoGetAssignees(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetBranch', function() {
        it('should call repoGetBranch successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetBranch call and complete the assertions
          /*

          instance.repoGetBranch(owner, repo, branch, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Branch);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetBranchProtection', function() {
        it('should call repoGetBranchProtection successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetBranchProtection call and complete the assertions
          /*

          instance.repoGetBranchProtection(owner, repo, name, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.BranchProtection);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetByID', function() {
        it('should call repoGetByID successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetByID call and complete the assertions
          /*

          instance.repoGetByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetCombinedStatusByRef', function() {
        it('should call repoGetCombinedStatusByRef successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetCombinedStatusByRef call and complete the assertions
          /*
          var opts = {};

          instance.repoGetCombinedStatusByRef(owner, repo, ref, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.CombinedStatus);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetContents', function() {
        it('should call repoGetContents successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetContents call and complete the assertions
          /*
          var opts = {};

          instance.repoGetContents(owner, repo, filepath, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.ContentsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetContentsList', function() {
        it('should call repoGetContentsList successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetContentsList call and complete the assertions
          /*
          var opts = {};

          instance.repoGetContentsList(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.ContentsResponse);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetEditorConfig', function() {
        it('should call repoGetEditorConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetEditorConfig call
          /*

          instance.repoGetEditorConfig(owner, repo, filepath, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetGitHook', function() {
        it('should call repoGetGitHook successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetGitHook call and complete the assertions
          /*

          instance.repoGetGitHook(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.GitHook);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetHook', function() {
        it('should call repoGetHook successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetHook call and complete the assertions
          /*

          instance.repoGetHook(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Hook);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetIssueTemplates', function() {
        it('should call repoGetIssueTemplates successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetIssueTemplates call and complete the assertions
          /*

          instance.repoGetIssueTemplates(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.IssueTemplate);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetKey', function() {
        it('should call repoGetKey successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetKey call and complete the assertions
          /*

          instance.repoGetKey(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.DeployKey);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetLanguages', function() {
        it('should call repoGetLanguages successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetLanguages call and complete the assertions
          /*

          instance.repoGetLanguages(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;number&#x27;);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetPullRequest', function() {
        it('should call repoGetPullRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetPullRequest call and complete the assertions
          /*

          instance.repoGetPullRequest(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PullRequest);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetPullRequestCommits', function() {
        it('should call repoGetPullRequestCommits successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetPullRequestCommits call and complete the assertions
          /*
          var opts = {};

          instance.repoGetPullRequestCommits(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Commit);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetPullReview', function() {
        it('should call repoGetPullReview successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetPullReview call and complete the assertions
          /*

          instance.repoGetPullReview(owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PullReview);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetPullReviewComments', function() {
        it('should call repoGetPullReviewComments successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetPullReviewComments call and complete the assertions
          /*

          instance.repoGetPullReviewComments(owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.PullReviewComment);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetRawFile', function() {
        it('should call repoGetRawFile successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetRawFile call
          /*
          var opts = {};

          instance.repoGetRawFile(owner, repo, filepath, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetRelease', function() {
        it('should call repoGetRelease successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetRelease call and complete the assertions
          /*

          instance.repoGetRelease(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Release);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetReleaseAttachment', function() {
        it('should call repoGetReleaseAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetReleaseAttachment call and complete the assertions
          /*

          instance.repoGetReleaseAttachment(owner, repo, id, attachmentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Attachment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetReleaseByTag', function() {
        it('should call repoGetReleaseByTag successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetReleaseByTag call and complete the assertions
          /*

          instance.repoGetReleaseByTag(owner, repo, tag, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Release);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetReviewers', function() {
        it('should call repoGetReviewers successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetReviewers call and complete the assertions
          /*

          instance.repoGetReviewers(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetSingleCommit', function() {
        it('should call repoGetSingleCommit successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetSingleCommit call and complete the assertions
          /*

          instance.repoGetSingleCommit(owner, repo, sha, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Commit);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoGetTag', function() {
        it('should call repoGetTag successfully', function(done) {
          // TODO: uncomment, update parameter values for repoGetTag call and complete the assertions
          /*

          instance.repoGetTag(owner, repo, tag, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Tag);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListAllGitRefs', function() {
        it('should call repoListAllGitRefs successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListAllGitRefs call and complete the assertions
          /*

          instance.repoListAllGitRefs(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Reference);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListBranchProtection', function() {
        it('should call repoListBranchProtection successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListBranchProtection call and complete the assertions
          /*

          instance.repoListBranchProtection(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.BranchProtection);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListBranches', function() {
        it('should call repoListBranches successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListBranches call and complete the assertions
          /*
          var opts = {};

          instance.repoListBranches(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Branch);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListCollaborators', function() {
        it('should call repoListCollaborators successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListCollaborators call and complete the assertions
          /*
          var opts = {};

          instance.repoListCollaborators(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListGitHooks', function() {
        it('should call repoListGitHooks successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListGitHooks call and complete the assertions
          /*

          instance.repoListGitHooks(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.GitHook);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListGitRefs', function() {
        it('should call repoListGitRefs successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListGitRefs call and complete the assertions
          /*

          instance.repoListGitRefs(owner, repo, ref, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Reference);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListHooks', function() {
        it('should call repoListHooks successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListHooks call and complete the assertions
          /*
          var opts = {};

          instance.repoListHooks(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Hook);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListKeys', function() {
        it('should call repoListKeys successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListKeys call and complete the assertions
          /*
          var opts = {};

          instance.repoListKeys(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.DeployKey);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListPullRequests', function() {
        it('should call repoListPullRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListPullRequests call and complete the assertions
          /*
          var opts = {};

          instance.repoListPullRequests(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.PullRequest);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListPullReviews', function() {
        it('should call repoListPullReviews successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListPullReviews call and complete the assertions
          /*
          var opts = {};

          instance.repoListPullReviews(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.PullReview);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListReleaseAttachments', function() {
        it('should call repoListReleaseAttachments successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListReleaseAttachments call and complete the assertions
          /*

          instance.repoListReleaseAttachments(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Attachment);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListReleases', function() {
        it('should call repoListReleases successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListReleases call and complete the assertions
          /*
          var opts = {};

          instance.repoListReleases(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Release);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListStargazers', function() {
        it('should call repoListStargazers successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListStargazers call and complete the assertions
          /*
          var opts = {};

          instance.repoListStargazers(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListStatuses', function() {
        it('should call repoListStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListStatuses call and complete the assertions
          /*
          var opts = {};

          instance.repoListStatuses(owner, repo, sha, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.CommitStatus);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListStatusesByRef', function() {
        it('should call repoListStatusesByRef successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListStatusesByRef call and complete the assertions
          /*
          var opts = {};

          instance.repoListStatusesByRef(owner, repo, ref, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.CommitStatus);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListSubscribers', function() {
        it('should call repoListSubscribers successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListSubscribers call and complete the assertions
          /*
          var opts = {};

          instance.repoListSubscribers(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListTags', function() {
        it('should call repoListTags successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListTags call and complete the assertions
          /*
          var opts = {};

          instance.repoListTags(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Tag);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListTeams', function() {
        it('should call repoListTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListTeams call and complete the assertions
          /*

          instance.repoListTeams(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Team);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoListTopics', function() {
        it('should call repoListTopics successfully', function(done) {
          // TODO: uncomment, update parameter values for repoListTopics call and complete the assertions
          /*
          var opts = {};

          instance.repoListTopics(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.TopicName);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoMergePullRequest', function() {
        it('should call repoMergePullRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for repoMergePullRequest call
          /*
          var opts = {};

          instance.repoMergePullRequest(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoMigrate', function() {
        it('should call repoMigrate successfully', function(done) {
          // TODO: uncomment, update parameter values for repoMigrate call and complete the assertions
          /*
          var opts = {};

          instance.repoMigrate(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoMirrorSync', function() {
        it('should call repoMirrorSync successfully', function(done) {
          // TODO: uncomment, update parameter values for repoMirrorSync call
          /*

          instance.repoMirrorSync(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoPullRequestIsMerged', function() {
        it('should call repoPullRequestIsMerged successfully', function(done) {
          // TODO: uncomment, update parameter values for repoPullRequestIsMerged call
          /*

          instance.repoPullRequestIsMerged(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoSearch', function() {
        it('should call repoSearch successfully', function(done) {
          // TODO: uncomment, update parameter values for repoSearch call and complete the assertions
          /*
          var opts = {};

          instance.repoSearch(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.SearchResults);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoSigningKey', function() {
        it('should call repoSigningKey successfully', function(done) {
          // TODO: uncomment, update parameter values for repoSigningKey call and complete the assertions
          /*

          instance.repoSigningKey(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoSubmitPullReview', function() {
        it('should call repoSubmitPullReview successfully', function(done) {
          // TODO: uncomment, update parameter values for repoSubmitPullReview call and complete the assertions
          /*

          instance.repoSubmitPullReview(body, owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PullReview);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoTestHook', function() {
        it('should call repoTestHook successfully', function(done) {
          // TODO: uncomment, update parameter values for repoTestHook call
          /*

          instance.repoTestHook(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoTrackedTimes', function() {
        it('should call repoTrackedTimes successfully', function(done) {
          // TODO: uncomment, update parameter values for repoTrackedTimes call and complete the assertions
          /*
          var opts = {};

          instance.repoTrackedTimes(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.TrackedTime);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoTransfer', function() {
        it('should call repoTransfer successfully', function(done) {
          // TODO: uncomment, update parameter values for repoTransfer call and complete the assertions
          /*

          instance.repoTransfer(body, owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoUnDismissPullReview', function() {
        it('should call repoUnDismissPullReview successfully', function(done) {
          // TODO: uncomment, update parameter values for repoUnDismissPullReview call and complete the assertions
          /*

          instance.repoUnDismissPullReview(owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PullReview);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoUpdateFile', function() {
        it('should call repoUpdateFile successfully', function(done) {
          // TODO: uncomment, update parameter values for repoUpdateFile call and complete the assertions
          /*

          instance.repoUpdateFile(body, owner, repo, filepath, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.FileResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoUpdatePullRequest', function() {
        it('should call repoUpdatePullRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for repoUpdatePullRequest call
          /*

          instance.repoUpdatePullRequest(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('repoUpdateTopics', function() {
        it('should call repoUpdateTopics successfully', function(done) {
          // TODO: uncomment, update parameter values for repoUpdateTopics call
          /*
          var opts = {};

          instance.repoUpdateTopics(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('topicSearch', function() {
        it('should call topicSearch successfully', function(done) {
          // TODO: uncomment, update parameter values for topicSearch call and complete the assertions
          /*
          var opts = {};

          instance.topicSearch(q, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.TopicResponse);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentCheckSubscription', function() {
        it('should call userCurrentCheckSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentCheckSubscription call and complete the assertions
          /*

          instance.userCurrentCheckSubscription(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.WatchInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentDeleteSubscription', function() {
        it('should call userCurrentDeleteSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentDeleteSubscription call
          /*

          instance.userCurrentDeleteSubscription(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentPutSubscription', function() {
        it('should call userCurrentPutSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentPutSubscription call and complete the assertions
          /*

          instance.userCurrentPutSubscription(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.WatchInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userTrackedTimes', function() {
        it('should call userTrackedTimes successfully', function(done) {
          // TODO: uncomment, update parameter values for userTrackedTimes call and complete the assertions
          /*

          instance.userTrackedTimes(owner, repo, user, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.TrackedTime);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
