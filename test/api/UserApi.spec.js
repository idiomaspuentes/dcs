/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new dcs.UserApi();
  });

  describe('(package)', function() {
    describe('UserApi', function() {
      describe('createCurrentUserRepo', function() {
        it('should call createCurrentUserRepo successfully', function(done) {
          // TODO: uncomment, update parameter values for createCurrentUserRepo call and complete the assertions
          /*
          var opts = {};

          instance.createCurrentUserRepo(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserSettings', function() {
        it('should call getUserSettings successfully', function(done) {
          // TODO: uncomment getUserSettings call and complete the assertions
          /*

          instance.getUserSettings(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.UserSettings);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getVerificationToken', function() {
        it('should call getVerificationToken successfully', function(done) {
          // TODO: uncomment getVerificationToken call and complete the assertions
          /*

          instance.getVerificationToken(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateUserSettings', function() {
        it('should call updateUserSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateUserSettings call and complete the assertions
          /*
          var opts = {};

          instance.updateUserSettings(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.UserSettings);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userAddEmail', function() {
        it('should call userAddEmail successfully', function(done) {
          // TODO: uncomment, update parameter values for userAddEmail call and complete the assertions
          /*
          var opts = {};

          instance.userAddEmail(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Email);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCheckFollowing', function() {
        it('should call userCheckFollowing successfully', function(done) {
          // TODO: uncomment, update parameter values for userCheckFollowing call
          /*

          instance.userCheckFollowing(follower, followee, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCreateOAuth2Application', function() {
        it('should call userCreateOAuth2Application successfully', function(done) {
          // TODO: uncomment, update parameter values for userCreateOAuth2Application call and complete the assertions
          /*

          instance.userCreateOAuth2Application(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.OAuth2Application);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCreateToken', function() {
        it('should call userCreateToken successfully', function(done) {
          // TODO: uncomment, update parameter values for userCreateToken call and complete the assertions
          /*
          var opts = {};

          instance.userCreateToken(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.AccessToken);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentCheckFollowing', function() {
        it('should call userCurrentCheckFollowing successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentCheckFollowing call
          /*

          instance.userCurrentCheckFollowing(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentCheckStarring', function() {
        it('should call userCurrentCheckStarring successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentCheckStarring call
          /*

          instance.userCurrentCheckStarring(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentDeleteFollow', function() {
        it('should call userCurrentDeleteFollow successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentDeleteFollow call
          /*

          instance.userCurrentDeleteFollow(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentDeleteGPGKey', function() {
        it('should call userCurrentDeleteGPGKey successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentDeleteGPGKey call
          /*

          instance.userCurrentDeleteGPGKey(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentDeleteKey', function() {
        it('should call userCurrentDeleteKey successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentDeleteKey call
          /*

          instance.userCurrentDeleteKey(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentDeleteStar', function() {
        it('should call userCurrentDeleteStar successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentDeleteStar call
          /*

          instance.userCurrentDeleteStar(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentGetGPGKey', function() {
        it('should call userCurrentGetGPGKey successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentGetGPGKey call and complete the assertions
          /*

          instance.userCurrentGetGPGKey(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.GPGKey);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentGetKey', function() {
        it('should call userCurrentGetKey successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentGetKey call and complete the assertions
          /*

          instance.userCurrentGetKey(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PublicKey);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentListFollowers', function() {
        it('should call userCurrentListFollowers successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentListFollowers call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentListFollowers(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentListFollowing', function() {
        it('should call userCurrentListFollowing successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentListFollowing call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentListFollowing(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentListGPGKeys', function() {
        it('should call userCurrentListGPGKeys successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentListGPGKeys call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentListGPGKeys(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.GPGKey);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentListKeys', function() {
        it('should call userCurrentListKeys successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentListKeys call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentListKeys(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.PublicKey);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentListRepos', function() {
        it('should call userCurrentListRepos successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentListRepos call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentListRepos(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentListStarred', function() {
        it('should call userCurrentListStarred successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentListStarred call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentListStarred(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentListSubscriptions', function() {
        it('should call userCurrentListSubscriptions successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentListSubscriptions call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentListSubscriptions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentPostGPGKey', function() {
        it('should call userCurrentPostGPGKey successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentPostGPGKey call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentPostGPGKey(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.GPGKey);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentPostKey', function() {
        it('should call userCurrentPostKey successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentPostKey call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentPostKey(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PublicKey);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentPutFollow', function() {
        it('should call userCurrentPutFollow successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentPutFollow call
          /*

          instance.userCurrentPutFollow(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentPutStar', function() {
        it('should call userCurrentPutStar successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentPutStar call
          /*

          instance.userCurrentPutStar(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userCurrentTrackedTimes', function() {
        it('should call userCurrentTrackedTimes successfully', function(done) {
          // TODO: uncomment, update parameter values for userCurrentTrackedTimes call and complete the assertions
          /*
          var opts = {};

          instance.userCurrentTrackedTimes(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.TrackedTime);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userDeleteAccessToken', function() {
        it('should call userDeleteAccessToken successfully', function(done) {
          // TODO: uncomment, update parameter values for userDeleteAccessToken call
          /*

          instance.userDeleteAccessToken(username, token, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userDeleteOAuth2Application', function() {
        it('should call userDeleteOAuth2Application successfully', function(done) {
          // TODO: uncomment, update parameter values for userDeleteOAuth2Application call
          /*

          instance.userDeleteOAuth2Application(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGet', function() {
        it('should call userGet successfully', function(done) {
          // TODO: uncomment, update parameter values for userGet call and complete the assertions
          /*

          instance.userGet(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetCurrent', function() {
        it('should call userGetCurrent successfully', function(done) {
          // TODO: uncomment userGetCurrent call and complete the assertions
          /*

          instance.userGetCurrent(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetHeatmapData', function() {
        it('should call userGetHeatmapData successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetHeatmapData call and complete the assertions
          /*

          instance.userGetHeatmapData(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.UserHeatmapData);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetOAuth2Application', function() {
        it('should call userGetOAuth2Application successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetOAuth2Application call and complete the assertions
          /*

          instance.userGetOAuth2Application(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.OAuth2Application);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetOauth2Application', function() {
        it('should call userGetOauth2Application successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetOauth2Application call and complete the assertions
          /*
          var opts = {};

          instance.userGetOauth2Application(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.OAuth2Application);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetStopWatches', function() {
        it('should call userGetStopWatches successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetStopWatches call and complete the assertions
          /*
          var opts = {};

          instance.userGetStopWatches(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.StopWatch);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGetTokens', function() {
        it('should call userGetTokens successfully', function(done) {
          // TODO: uncomment, update parameter values for userGetTokens call and complete the assertions
          /*
          var opts = {};

          instance.userGetTokens(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.AccessToken);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListEmails', function() {
        it('should call userListEmails successfully', function(done) {
          // TODO: uncomment userListEmails call and complete the assertions
          /*

          instance.userListEmails(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Email);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListFollowers', function() {
        it('should call userListFollowers successfully', function(done) {
          // TODO: uncomment, update parameter values for userListFollowers call and complete the assertions
          /*
          var opts = {};

          instance.userListFollowers(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListFollowing', function() {
        it('should call userListFollowing successfully', function(done) {
          // TODO: uncomment, update parameter values for userListFollowing call and complete the assertions
          /*
          var opts = {};

          instance.userListFollowing(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListGPGKeys', function() {
        it('should call userListGPGKeys successfully', function(done) {
          // TODO: uncomment, update parameter values for userListGPGKeys call and complete the assertions
          /*
          var opts = {};

          instance.userListGPGKeys(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.GPGKey);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListKeys', function() {
        it('should call userListKeys successfully', function(done) {
          // TODO: uncomment, update parameter values for userListKeys call and complete the assertions
          /*
          var opts = {};

          instance.userListKeys(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.PublicKey);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListRepos', function() {
        it('should call userListRepos successfully', function(done) {
          // TODO: uncomment, update parameter values for userListRepos call and complete the assertions
          /*
          var opts = {};

          instance.userListRepos(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListStarred', function() {
        it('should call userListStarred successfully', function(done) {
          // TODO: uncomment, update parameter values for userListStarred call and complete the assertions
          /*
          var opts = {};

          instance.userListStarred(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListSubscriptions', function() {
        it('should call userListSubscriptions successfully', function(done) {
          // TODO: uncomment, update parameter values for userListSubscriptions call and complete the assertions
          /*
          var opts = {};

          instance.userListSubscriptions(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userListTeams', function() {
        it('should call userListTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for userListTeams call and complete the assertions
          /*
          var opts = {};

          instance.userListTeams(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Team);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userSearch', function() {
        it('should call userSearch successfully', function(done) {
          // TODO: uncomment, update parameter values for userSearch call and complete the assertions
          /*
          var opts = {};

          instance.userSearch(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.InlineResponse2001);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userUpdateOAuth2Application', function() {
        it('should call userUpdateOAuth2Application successfully', function(done) {
          // TODO: uncomment, update parameter values for userUpdateOAuth2Application call and complete the assertions
          /*

          instance.userUpdateOAuth2Application(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.OAuth2Application);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userVerifyGPGKey', function() {
        it('should call userVerifyGPGKey successfully', function(done) {
          // TODO: uncomment userVerifyGPGKey call and complete the assertions
          /*

          instance.userVerifyGPGKey(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.GPGKey);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
