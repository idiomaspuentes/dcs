/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new dcs.OrganizationApi();
  });

  describe('(package)', function() {
    describe('OrganizationApi', function() {
      describe('createOrgRepo', function() {
        it('should call createOrgRepo successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrgRepo call and complete the assertions
          /*
          var opts = {};

          instance.createOrgRepo(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrgRepoDeprecated', function() {
        it('should call createOrgRepoDeprecated successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrgRepoDeprecated call and complete the assertions
          /*
          var opts = {};

          instance.createOrgRepoDeprecated(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgAddTeamMember', function() {
        it('should call orgAddTeamMember successfully', function(done) {
          // TODO: uncomment, update parameter values for orgAddTeamMember call
          /*

          instance.orgAddTeamMember(id, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgAddTeamRepository', function() {
        it('should call orgAddTeamRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for orgAddTeamRepository call
          /*

          instance.orgAddTeamRepository(id, org, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgConcealMember', function() {
        it('should call orgConcealMember successfully', function(done) {
          // TODO: uncomment, update parameter values for orgConcealMember call
          /*

          instance.orgConcealMember(org, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgCreate', function() {
        it('should call orgCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for orgCreate call and complete the assertions
          /*

          instance.orgCreate(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Organization);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgCreateHook', function() {
        it('should call orgCreateHook successfully', function(done) {
          // TODO: uncomment, update parameter values for orgCreateHook call and complete the assertions
          /*

          instance.orgCreateHook(body, org, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Hook);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgCreateLabel', function() {
        it('should call orgCreateLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for orgCreateLabel call and complete the assertions
          /*
          var opts = {};

          instance.orgCreateLabel(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Label);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgCreateTeam', function() {
        it('should call orgCreateTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for orgCreateTeam call and complete the assertions
          /*
          var opts = {};

          instance.orgCreateTeam(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Team);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgDelete', function() {
        it('should call orgDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for orgDelete call
          /*

          instance.orgDelete(org, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgDeleteHook', function() {
        it('should call orgDeleteHook successfully', function(done) {
          // TODO: uncomment, update parameter values for orgDeleteHook call
          /*

          instance.orgDeleteHook(org, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgDeleteLabel', function() {
        it('should call orgDeleteLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for orgDeleteLabel call
          /*

          instance.orgDeleteLabel(org, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgDeleteMember', function() {
        it('should call orgDeleteMember successfully', function(done) {
          // TODO: uncomment, update parameter values for orgDeleteMember call
          /*

          instance.orgDeleteMember(org, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgDeleteTeam', function() {
        it('should call orgDeleteTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for orgDeleteTeam call
          /*

          instance.orgDeleteTeam(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgEdit', function() {
        it('should call orgEdit successfully', function(done) {
          // TODO: uncomment, update parameter values for orgEdit call and complete the assertions
          /*

          instance.orgEdit(body, org, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Organization);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgEditHook', function() {
        it('should call orgEditHook successfully', function(done) {
          // TODO: uncomment, update parameter values for orgEditHook call and complete the assertions
          /*
          var opts = {};

          instance.orgEditHook(org, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Hook);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgEditLabel', function() {
        it('should call orgEditLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for orgEditLabel call and complete the assertions
          /*
          var opts = {};

          instance.orgEditLabel(org, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Label);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgEditTeam', function() {
        it('should call orgEditTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for orgEditTeam call and complete the assertions
          /*
          var opts = {};

          instance.orgEditTeam(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Team);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgGet', function() {
        it('should call orgGet successfully', function(done) {
          // TODO: uncomment, update parameter values for orgGet call and complete the assertions
          /*

          instance.orgGet(org, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Organization);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgGetAll', function() {
        it('should call orgGetAll successfully', function(done) {
          // TODO: uncomment, update parameter values for orgGetAll call and complete the assertions
          /*
          var opts = {};

          instance.orgGetAll(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Organization);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgGetHook', function() {
        it('should call orgGetHook successfully', function(done) {
          // TODO: uncomment, update parameter values for orgGetHook call and complete the assertions
          /*

          instance.orgGetHook(org, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Hook);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgGetLabel', function() {
        it('should call orgGetLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for orgGetLabel call and complete the assertions
          /*

          instance.orgGetLabel(org, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Label);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgGetTeam', function() {
        it('should call orgGetTeam successfully', function(done) {
          // TODO: uncomment, update parameter values for orgGetTeam call and complete the assertions
          /*

          instance.orgGetTeam(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Team);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgIsMember', function() {
        it('should call orgIsMember successfully', function(done) {
          // TODO: uncomment, update parameter values for orgIsMember call
          /*

          instance.orgIsMember(org, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgIsPublicMember', function() {
        it('should call orgIsPublicMember successfully', function(done) {
          // TODO: uncomment, update parameter values for orgIsPublicMember call
          /*

          instance.orgIsPublicMember(org, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListCurrentUserOrgs', function() {
        it('should call orgListCurrentUserOrgs successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListCurrentUserOrgs call and complete the assertions
          /*
          var opts = {};

          instance.orgListCurrentUserOrgs(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Organization);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListHooks', function() {
        it('should call orgListHooks successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListHooks call and complete the assertions
          /*
          var opts = {};

          instance.orgListHooks(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Hook);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListLabels', function() {
        it('should call orgListLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListLabels call and complete the assertions
          /*
          var opts = {};

          instance.orgListLabels(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Label);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListMembers', function() {
        it('should call orgListMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListMembers call and complete the assertions
          /*
          var opts = {};

          instance.orgListMembers(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListPublicMembers', function() {
        it('should call orgListPublicMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListPublicMembers call and complete the assertions
          /*
          var opts = {};

          instance.orgListPublicMembers(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListRepos', function() {
        it('should call orgListRepos successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListRepos call and complete the assertions
          /*
          var opts = {};

          instance.orgListRepos(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListTeamMember', function() {
        it('should call orgListTeamMember successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListTeamMember call and complete the assertions
          /*

          instance.orgListTeamMember(id, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListTeamMembers', function() {
        it('should call orgListTeamMembers successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListTeamMembers call and complete the assertions
          /*
          var opts = {};

          instance.orgListTeamMembers(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListTeamRepos', function() {
        it('should call orgListTeamRepos successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListTeamRepos call and complete the assertions
          /*
          var opts = {};

          instance.orgListTeamRepos(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListTeams', function() {
        it('should call orgListTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListTeams call and complete the assertions
          /*
          var opts = {};

          instance.orgListTeams(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Team);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgListUserOrgs', function() {
        it('should call orgListUserOrgs successfully', function(done) {
          // TODO: uncomment, update parameter values for orgListUserOrgs call and complete the assertions
          /*
          var opts = {};

          instance.orgListUserOrgs(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Organization);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgPublicizeMember', function() {
        it('should call orgPublicizeMember successfully', function(done) {
          // TODO: uncomment, update parameter values for orgPublicizeMember call
          /*

          instance.orgPublicizeMember(org, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgRemoveTeamMember', function() {
        it('should call orgRemoveTeamMember successfully', function(done) {
          // TODO: uncomment, update parameter values for orgRemoveTeamMember call
          /*

          instance.orgRemoveTeamMember(id, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('orgRemoveTeamRepository', function() {
        it('should call orgRemoveTeamRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for orgRemoveTeamRepository call
          /*

          instance.orgRemoveTeamRepository(id, org, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('teamSearch', function() {
        it('should call teamSearch successfully', function(done) {
          // TODO: uncomment, update parameter values for teamSearch call and complete the assertions
          /*
          var opts = {};

          instance.teamSearch(org, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.InlineResponse200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
