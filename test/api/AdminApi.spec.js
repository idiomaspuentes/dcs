/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new dcs.AdminApi();
  });

  describe('(package)', function() {
    describe('AdminApi', function() {
      describe('adminAdoptRepository', function() {
        it('should call adminAdoptRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for adminAdoptRepository call
          /*

          instance.adminAdoptRepository(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminCreateOrg', function() {
        it('should call adminCreateOrg successfully', function(done) {
          // TODO: uncomment, update parameter values for adminCreateOrg call and complete the assertions
          /*

          instance.adminCreateOrg(body, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Organization);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminCreatePublicKey', function() {
        it('should call adminCreatePublicKey successfully', function(done) {
          // TODO: uncomment, update parameter values for adminCreatePublicKey call and complete the assertions
          /*
          var opts = {};

          instance.adminCreatePublicKey(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.PublicKey);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminCreateRepo', function() {
        it('should call adminCreateRepo successfully', function(done) {
          // TODO: uncomment, update parameter values for adminCreateRepo call and complete the assertions
          /*

          instance.adminCreateRepo(body, username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminCreateUser', function() {
        it('should call adminCreateUser successfully', function(done) {
          // TODO: uncomment, update parameter values for adminCreateUser call and complete the assertions
          /*
          var opts = {};

          instance.adminCreateUser(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminCronList', function() {
        it('should call adminCronList successfully', function(done) {
          // TODO: uncomment, update parameter values for adminCronList call and complete the assertions
          /*
          var opts = {};

          instance.adminCronList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Cron);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminCronRun', function() {
        it('should call adminCronRun successfully', function(done) {
          // TODO: uncomment, update parameter values for adminCronRun call
          /*

          instance.adminCronRun(task, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminDeleteUnadoptedRepository', function() {
        it('should call adminDeleteUnadoptedRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for adminDeleteUnadoptedRepository call
          /*

          instance.adminDeleteUnadoptedRepository(owner, repo, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminDeleteUser', function() {
        it('should call adminDeleteUser successfully', function(done) {
          // TODO: uncomment, update parameter values for adminDeleteUser call
          /*

          instance.adminDeleteUser(username, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminDeleteUserPublicKey', function() {
        it('should call adminDeleteUserPublicKey successfully', function(done) {
          // TODO: uncomment, update parameter values for adminDeleteUserPublicKey call
          /*

          instance.adminDeleteUserPublicKey(username, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminEditUser', function() {
        it('should call adminEditUser successfully', function(done) {
          // TODO: uncomment, update parameter values for adminEditUser call and complete the assertions
          /*
          var opts = {};

          instance.adminEditUser(username, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminGetAllOrgs', function() {
        it('should call adminGetAllOrgs successfully', function(done) {
          // TODO: uncomment, update parameter values for adminGetAllOrgs call and complete the assertions
          /*
          var opts = {};

          instance.adminGetAllOrgs(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Organization);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminGetAllUsers', function() {
        it('should call adminGetAllUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for adminGetAllUsers call and complete the assertions
          /*
          var opts = {};

          instance.adminGetAllUsers(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('adminUnadoptedList', function() {
        it('should call adminUnadoptedList successfully', function(done) {
          // TODO: uncomment, update parameter values for adminUnadoptedList call and complete the assertions
          /*
          var opts = {};

          instance.adminUnadoptedList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(&#x27;string&#x27;);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
