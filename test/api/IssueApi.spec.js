/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new dcs.IssueApi();
  });

  describe('(package)', function() {
    describe('IssueApi', function() {
      describe('issueAddLabel', function() {
        it('should call issueAddLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for issueAddLabel call and complete the assertions
          /*
          var opts = {};

          instance.issueAddLabel(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Label);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueAddSubscription', function() {
        it('should call issueAddSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for issueAddSubscription call
          /*

          instance.issueAddSubscription(owner, repo, index, user, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueAddTime', function() {
        it('should call issueAddTime successfully', function(done) {
          // TODO: uncomment, update parameter values for issueAddTime call and complete the assertions
          /*
          var opts = {};

          instance.issueAddTime(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.TrackedTime);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueCheckSubscription', function() {
        it('should call issueCheckSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for issueCheckSubscription call and complete the assertions
          /*

          instance.issueCheckSubscription(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.WatchInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueClearLabels', function() {
        it('should call issueClearLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for issueClearLabels call
          /*

          instance.issueClearLabels(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueCreateComment', function() {
        it('should call issueCreateComment successfully', function(done) {
          // TODO: uncomment, update parameter values for issueCreateComment call and complete the assertions
          /*
          var opts = {};

          instance.issueCreateComment(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Comment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueCreateIssue', function() {
        it('should call issueCreateIssue successfully', function(done) {
          // TODO: uncomment, update parameter values for issueCreateIssue call and complete the assertions
          /*
          var opts = {};

          instance.issueCreateIssue(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Issue);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueCreateLabel', function() {
        it('should call issueCreateLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for issueCreateLabel call and complete the assertions
          /*
          var opts = {};

          instance.issueCreateLabel(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Label);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueCreateMilestone', function() {
        it('should call issueCreateMilestone successfully', function(done) {
          // TODO: uncomment, update parameter values for issueCreateMilestone call and complete the assertions
          /*
          var opts = {};

          instance.issueCreateMilestone(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Milestone);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueDeleteComment', function() {
        it('should call issueDeleteComment successfully', function(done) {
          // TODO: uncomment, update parameter values for issueDeleteComment call
          /*

          instance.issueDeleteComment(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueDeleteCommentDeprecated', function() {
        it('should call issueDeleteCommentDeprecated successfully', function(done) {
          // TODO: uncomment, update parameter values for issueDeleteCommentDeprecated call
          /*

          instance.issueDeleteCommentDeprecated(owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueDeleteLabel', function() {
        it('should call issueDeleteLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for issueDeleteLabel call
          /*

          instance.issueDeleteLabel(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueDeleteMilestone', function() {
        it('should call issueDeleteMilestone successfully', function(done) {
          // TODO: uncomment, update parameter values for issueDeleteMilestone call
          /*

          instance.issueDeleteMilestone(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueDeleteStopWatch', function() {
        it('should call issueDeleteStopWatch successfully', function(done) {
          // TODO: uncomment, update parameter values for issueDeleteStopWatch call
          /*

          instance.issueDeleteStopWatch(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueDeleteSubscription', function() {
        it('should call issueDeleteSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for issueDeleteSubscription call
          /*

          instance.issueDeleteSubscription(owner, repo, index, user, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueDeleteTime', function() {
        it('should call issueDeleteTime successfully', function(done) {
          // TODO: uncomment, update parameter values for issueDeleteTime call
          /*

          instance.issueDeleteTime(owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueEditComment', function() {
        it('should call issueEditComment successfully', function(done) {
          // TODO: uncomment, update parameter values for issueEditComment call and complete the assertions
          /*
          var opts = {};

          instance.issueEditComment(owner, repo, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Comment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueEditCommentDeprecated', function() {
        it('should call issueEditCommentDeprecated successfully', function(done) {
          // TODO: uncomment, update parameter values for issueEditCommentDeprecated call and complete the assertions
          /*
          var opts = {};

          instance.issueEditCommentDeprecated(owner, repo, index, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Comment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueEditIssue', function() {
        it('should call issueEditIssue successfully', function(done) {
          // TODO: uncomment, update parameter values for issueEditIssue call and complete the assertions
          /*
          var opts = {};

          instance.issueEditIssue(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Issue);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueEditIssueDeadline', function() {
        it('should call issueEditIssueDeadline successfully', function(done) {
          // TODO: uncomment, update parameter values for issueEditIssueDeadline call and complete the assertions
          /*
          var opts = {};

          instance.issueEditIssueDeadline(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.IssueDeadline);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueEditLabel', function() {
        it('should call issueEditLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for issueEditLabel call and complete the assertions
          /*
          var opts = {};

          instance.issueEditLabel(owner, repo, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Label);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueEditMilestone', function() {
        it('should call issueEditMilestone successfully', function(done) {
          // TODO: uncomment, update parameter values for issueEditMilestone call and complete the assertions
          /*
          var opts = {};

          instance.issueEditMilestone(owner, repo, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Milestone);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetComment', function() {
        it('should call issueGetComment successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetComment call and complete the assertions
          /*

          instance.issueGetComment(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Comment);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetCommentReactions', function() {
        it('should call issueGetCommentReactions successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetCommentReactions call and complete the assertions
          /*

          instance.issueGetCommentReactions(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Reaction);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetComments', function() {
        it('should call issueGetComments successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetComments call and complete the assertions
          /*
          var opts = {};

          instance.issueGetComments(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Comment);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetIssue', function() {
        it('should call issueGetIssue successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetIssue call and complete the assertions
          /*

          instance.issueGetIssue(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Issue);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetIssueReactions', function() {
        it('should call issueGetIssueReactions successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetIssueReactions call and complete the assertions
          /*
          var opts = {};

          instance.issueGetIssueReactions(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Reaction);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetLabel', function() {
        it('should call issueGetLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetLabel call and complete the assertions
          /*

          instance.issueGetLabel(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Label);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetLabels', function() {
        it('should call issueGetLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetLabels call and complete the assertions
          /*

          instance.issueGetLabels(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Label);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetMilestone', function() {
        it('should call issueGetMilestone successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetMilestone call and complete the assertions
          /*

          instance.issueGetMilestone(owner, repo, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Milestone);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetMilestonesList', function() {
        it('should call issueGetMilestonesList successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetMilestonesList call and complete the assertions
          /*
          var opts = {};

          instance.issueGetMilestonesList(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Milestone);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueGetRepoComments', function() {
        it('should call issueGetRepoComments successfully', function(done) {
          // TODO: uncomment, update parameter values for issueGetRepoComments call and complete the assertions
          /*
          var opts = {};

          instance.issueGetRepoComments(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Comment);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueListIssues', function() {
        it('should call issueListIssues successfully', function(done) {
          // TODO: uncomment, update parameter values for issueListIssues call and complete the assertions
          /*
          var opts = {};

          instance.issueListIssues(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Issue);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueListLabels', function() {
        it('should call issueListLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for issueListLabels call and complete the assertions
          /*
          var opts = {};

          instance.issueListLabels(owner, repo, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Label);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issuePostCommentReaction', function() {
        it('should call issuePostCommentReaction successfully', function(done) {
          // TODO: uncomment, update parameter values for issuePostCommentReaction call and complete the assertions
          /*
          var opts = {};

          instance.issuePostCommentReaction(owner, repo, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Reaction);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issuePostIssueReaction', function() {
        it('should call issuePostIssueReaction successfully', function(done) {
          // TODO: uncomment, update parameter values for issuePostIssueReaction call and complete the assertions
          /*
          var opts = {};

          instance.issuePostIssueReaction(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(dcs.Reaction);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueRemoveLabel', function() {
        it('should call issueRemoveLabel successfully', function(done) {
          // TODO: uncomment, update parameter values for issueRemoveLabel call
          /*

          instance.issueRemoveLabel(owner, repo, index, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueReplaceLabels', function() {
        it('should call issueReplaceLabels successfully', function(done) {
          // TODO: uncomment, update parameter values for issueReplaceLabels call and complete the assertions
          /*
          var opts = {};

          instance.issueReplaceLabels(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Label);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueResetTime', function() {
        it('should call issueResetTime successfully', function(done) {
          // TODO: uncomment, update parameter values for issueResetTime call
          /*

          instance.issueResetTime(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueSearchIssues', function() {
        it('should call issueSearchIssues successfully', function(done) {
          // TODO: uncomment, update parameter values for issueSearchIssues call and complete the assertions
          /*
          var opts = {};

          instance.issueSearchIssues(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.Issue);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueStartStopWatch', function() {
        it('should call issueStartStopWatch successfully', function(done) {
          // TODO: uncomment, update parameter values for issueStartStopWatch call
          /*

          instance.issueStartStopWatch(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueStopStopWatch', function() {
        it('should call issueStopStopWatch successfully', function(done) {
          // TODO: uncomment, update parameter values for issueStopStopWatch call
          /*

          instance.issueStopStopWatch(owner, repo, index, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueSubscriptions', function() {
        it('should call issueSubscriptions successfully', function(done) {
          // TODO: uncomment, update parameter values for issueSubscriptions call and complete the assertions
          /*
          var opts = {};

          instance.issueSubscriptions(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.User);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issueTrackedTimes', function() {
        it('should call issueTrackedTimes successfully', function(done) {
          // TODO: uncomment, update parameter values for issueTrackedTimes call and complete the assertions
          /*
          var opts = {};

          instance.issueTrackedTimes(owner, repo, index, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(dcs.TrackedTime);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
