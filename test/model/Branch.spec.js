/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Branch', function() {
      beforeEach(function() {
        instance = new dcs.Branch();
      });

      it('should create an instance of Branch', function() {
        // TODO: update the code to test Branch
        expect(instance).to.be.a(dcs.Branch);
      });

      it('should have the property commit (base name: "commit")', function() {
        // TODO: update the code to test the property commit
        expect(instance).to.have.property('commit');
        // expect(instance.commit).to.be(expectedValueLiteral);
      });

      it('should have the property effectiveBranchProtectionName (base name: "effective_branch_protection_name")', function() {
        // TODO: update the code to test the property effectiveBranchProtectionName
        expect(instance).to.have.property('effectiveBranchProtectionName');
        // expect(instance.effectiveBranchProtectionName).to.be(expectedValueLiteral);
      });

      it('should have the property enableStatusCheck (base name: "enable_status_check")', function() {
        // TODO: update the code to test the property enableStatusCheck
        expect(instance).to.have.property('enableStatusCheck');
        // expect(instance.enableStatusCheck).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property _protected (base name: "protected")', function() {
        // TODO: update the code to test the property _protected
        expect(instance).to.have.property('_protected');
        // expect(instance._protected).to.be(expectedValueLiteral);
      });

      it('should have the property requiredApprovals (base name: "required_approvals")', function() {
        // TODO: update the code to test the property requiredApprovals
        expect(instance).to.have.property('requiredApprovals');
        // expect(instance.requiredApprovals).to.be(expectedValueLiteral);
      });

      it('should have the property statusCheckContexts (base name: "status_check_contexts")', function() {
        // TODO: update the code to test the property statusCheckContexts
        expect(instance).to.have.property('statusCheckContexts');
        // expect(instance.statusCheckContexts).to.be(expectedValueLiteral);
      });

      it('should have the property userCanMerge (base name: "user_can_merge")', function() {
        // TODO: update the code to test the property userCanMerge
        expect(instance).to.have.property('userCanMerge');
        // expect(instance.userCanMerge).to.be(expectedValueLiteral);
      });

      it('should have the property userCanPush (base name: "user_can_push")', function() {
        // TODO: update the code to test the property userCanPush
        expect(instance).to.have.property('userCanPush');
        // expect(instance.userCanPush).to.be(expectedValueLiteral);
      });

    });
  });

}));
