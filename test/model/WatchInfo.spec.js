/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('WatchInfo', function() {
      beforeEach(function() {
        instance = new dcs.WatchInfo();
      });

      it('should create an instance of WatchInfo', function() {
        // TODO: update the code to test WatchInfo
        expect(instance).to.be.a(dcs.WatchInfo);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property ignored (base name: "ignored")', function() {
        // TODO: update the code to test the property ignored
        expect(instance).to.have.property('ignored');
        // expect(instance.ignored).to.be(expectedValueLiteral);
      });

      it('should have the property reason (base name: "reason")', function() {
        // TODO: update the code to test the property reason
        expect(instance).to.have.property('reason');
        // expect(instance.reason).to.be(expectedValueLiteral);
      });

      it('should have the property repositoryUrl (base name: "repository_url")', function() {
        // TODO: update the code to test the property repositoryUrl
        expect(instance).to.have.property('repositoryUrl');
        // expect(instance.repositoryUrl).to.be(expectedValueLiteral);
      });

      it('should have the property subscribed (base name: "subscribed")', function() {
        // TODO: update the code to test the property subscribed
        expect(instance).to.have.property('subscribed');
        // expect(instance.subscribed).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

    });
  });

}));
