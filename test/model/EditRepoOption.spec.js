/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EditRepoOption', function() {
      beforeEach(function() {
        instance = new dcs.EditRepoOption();
      });

      it('should create an instance of EditRepoOption', function() {
        // TODO: update the code to test EditRepoOption
        expect(instance).to.be.a(dcs.EditRepoOption);
      });

      it('should have the property allowManualMerge (base name: "allow_manual_merge")', function() {
        // TODO: update the code to test the property allowManualMerge
        expect(instance).to.have.property('allowManualMerge');
        // expect(instance.allowManualMerge).to.be(expectedValueLiteral);
      });

      it('should have the property allowMergeCommits (base name: "allow_merge_commits")', function() {
        // TODO: update the code to test the property allowMergeCommits
        expect(instance).to.have.property('allowMergeCommits');
        // expect(instance.allowMergeCommits).to.be(expectedValueLiteral);
      });

      it('should have the property allowRebase (base name: "allow_rebase")', function() {
        // TODO: update the code to test the property allowRebase
        expect(instance).to.have.property('allowRebase');
        // expect(instance.allowRebase).to.be(expectedValueLiteral);
      });

      it('should have the property allowRebaseExplicit (base name: "allow_rebase_explicit")', function() {
        // TODO: update the code to test the property allowRebaseExplicit
        expect(instance).to.have.property('allowRebaseExplicit');
        // expect(instance.allowRebaseExplicit).to.be(expectedValueLiteral);
      });

      it('should have the property allowSquashMerge (base name: "allow_squash_merge")', function() {
        // TODO: update the code to test the property allowSquashMerge
        expect(instance).to.have.property('allowSquashMerge');
        // expect(instance.allowSquashMerge).to.be(expectedValueLiteral);
      });

      it('should have the property archived (base name: "archived")', function() {
        // TODO: update the code to test the property archived
        expect(instance).to.have.property('archived');
        // expect(instance.archived).to.be(expectedValueLiteral);
      });

      it('should have the property autodetectManualMerge (base name: "autodetect_manual_merge")', function() {
        // TODO: update the code to test the property autodetectManualMerge
        expect(instance).to.have.property('autodetectManualMerge');
        // expect(instance.autodetectManualMerge).to.be(expectedValueLiteral);
      });

      it('should have the property defaultBranch (base name: "default_branch")', function() {
        // TODO: update the code to test the property defaultBranch
        expect(instance).to.have.property('defaultBranch');
        // expect(instance.defaultBranch).to.be(expectedValueLiteral);
      });

      it('should have the property defaultDeleteBranchAfterMerge (base name: "default_delete_branch_after_merge")', function() {
        // TODO: update the code to test the property defaultDeleteBranchAfterMerge
        expect(instance).to.have.property('defaultDeleteBranchAfterMerge');
        // expect(instance.defaultDeleteBranchAfterMerge).to.be(expectedValueLiteral);
      });

      it('should have the property defaultMergeStyle (base name: "default_merge_style")', function() {
        // TODO: update the code to test the property defaultMergeStyle
        expect(instance).to.have.property('defaultMergeStyle');
        // expect(instance.defaultMergeStyle).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property externalTracker (base name: "external_tracker")', function() {
        // TODO: update the code to test the property externalTracker
        expect(instance).to.have.property('externalTracker');
        // expect(instance.externalTracker).to.be(expectedValueLiteral);
      });

      it('should have the property externalWiki (base name: "external_wiki")', function() {
        // TODO: update the code to test the property externalWiki
        expect(instance).to.have.property('externalWiki');
        // expect(instance.externalWiki).to.be(expectedValueLiteral);
      });

      it('should have the property hasIssues (base name: "has_issues")', function() {
        // TODO: update the code to test the property hasIssues
        expect(instance).to.have.property('hasIssues');
        // expect(instance.hasIssues).to.be(expectedValueLiteral);
      });

      it('should have the property hasProjects (base name: "has_projects")', function() {
        // TODO: update the code to test the property hasProjects
        expect(instance).to.have.property('hasProjects');
        // expect(instance.hasProjects).to.be(expectedValueLiteral);
      });

      it('should have the property hasPullRequests (base name: "has_pull_requests")', function() {
        // TODO: update the code to test the property hasPullRequests
        expect(instance).to.have.property('hasPullRequests');
        // expect(instance.hasPullRequests).to.be(expectedValueLiteral);
      });

      it('should have the property hasWiki (base name: "has_wiki")', function() {
        // TODO: update the code to test the property hasWiki
        expect(instance).to.have.property('hasWiki');
        // expect(instance.hasWiki).to.be(expectedValueLiteral);
      });

      it('should have the property ignoreWhitespaceConflicts (base name: "ignore_whitespace_conflicts")', function() {
        // TODO: update the code to test the property ignoreWhitespaceConflicts
        expect(instance).to.have.property('ignoreWhitespaceConflicts');
        // expect(instance.ignoreWhitespaceConflicts).to.be(expectedValueLiteral);
      });

      it('should have the property internalTracker (base name: "internal_tracker")', function() {
        // TODO: update the code to test the property internalTracker
        expect(instance).to.have.property('internalTracker');
        // expect(instance.internalTracker).to.be(expectedValueLiteral);
      });

      it('should have the property mirrorInterval (base name: "mirror_interval")', function() {
        // TODO: update the code to test the property mirrorInterval
        expect(instance).to.have.property('mirrorInterval');
        // expect(instance.mirrorInterval).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property _private (base name: "private")', function() {
        // TODO: update the code to test the property _private
        expect(instance).to.have.property('_private');
        // expect(instance._private).to.be(expectedValueLiteral);
      });

      it('should have the property template (base name: "template")', function() {
        // TODO: update the code to test the property template
        expect(instance).to.have.property('template');
        // expect(instance.template).to.be(expectedValueLiteral);
      });

      it('should have the property website (base name: "website")', function() {
        // TODO: update the code to test the property website
        expect(instance).to.have.property('website');
        // expect(instance.website).to.be(expectedValueLiteral);
      });

    });
  });

}));
