/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DeployKey', function() {
      beforeEach(function() {
        instance = new dcs.DeployKey();
      });

      it('should create an instance of DeployKey', function() {
        // TODO: update the code to test DeployKey
        expect(instance).to.be.a(dcs.DeployKey);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property fingerprint (base name: "fingerprint")', function() {
        // TODO: update the code to test the property fingerprint
        expect(instance).to.have.property('fingerprint');
        // expect(instance.fingerprint).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property key (base name: "key")', function() {
        // TODO: update the code to test the property key
        expect(instance).to.have.property('key');
        // expect(instance.key).to.be(expectedValueLiteral);
      });

      it('should have the property keyId (base name: "key_id")', function() {
        // TODO: update the code to test the property keyId
        expect(instance).to.have.property('keyId');
        // expect(instance.keyId).to.be(expectedValueLiteral);
      });

      it('should have the property readOnly (base name: "read_only")', function() {
        // TODO: update the code to test the property readOnly
        expect(instance).to.have.property('readOnly');
        // expect(instance.readOnly).to.be(expectedValueLiteral);
      });

      it('should have the property repository (base name: "repository")', function() {
        // TODO: update the code to test the property repository
        expect(instance).to.have.property('repository');
        // expect(instance.repository).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

    });
  });

}));
