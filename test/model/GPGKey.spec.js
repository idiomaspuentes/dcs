/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GPGKey', function() {
      beforeEach(function() {
        instance = new dcs.GPGKey();
      });

      it('should create an instance of GPGKey', function() {
        // TODO: update the code to test GPGKey
        expect(instance).to.be.a(dcs.GPGKey);
      });

      it('should have the property canCertify (base name: "can_certify")', function() {
        // TODO: update the code to test the property canCertify
        expect(instance).to.have.property('canCertify');
        // expect(instance.canCertify).to.be(expectedValueLiteral);
      });

      it('should have the property canEncryptComms (base name: "can_encrypt_comms")', function() {
        // TODO: update the code to test the property canEncryptComms
        expect(instance).to.have.property('canEncryptComms');
        // expect(instance.canEncryptComms).to.be(expectedValueLiteral);
      });

      it('should have the property canEncryptStorage (base name: "can_encrypt_storage")', function() {
        // TODO: update the code to test the property canEncryptStorage
        expect(instance).to.have.property('canEncryptStorage');
        // expect(instance.canEncryptStorage).to.be(expectedValueLiteral);
      });

      it('should have the property canSign (base name: "can_sign")', function() {
        // TODO: update the code to test the property canSign
        expect(instance).to.have.property('canSign');
        // expect(instance.canSign).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property emails (base name: "emails")', function() {
        // TODO: update the code to test the property emails
        expect(instance).to.have.property('emails');
        // expect(instance.emails).to.be(expectedValueLiteral);
      });

      it('should have the property expiresAt (base name: "expires_at")', function() {
        // TODO: update the code to test the property expiresAt
        expect(instance).to.have.property('expiresAt');
        // expect(instance.expiresAt).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property keyId (base name: "key_id")', function() {
        // TODO: update the code to test the property keyId
        expect(instance).to.have.property('keyId');
        // expect(instance.keyId).to.be(expectedValueLiteral);
      });

      it('should have the property primaryKeyId (base name: "primary_key_id")', function() {
        // TODO: update the code to test the property primaryKeyId
        expect(instance).to.have.property('primaryKeyId');
        // expect(instance.primaryKeyId).to.be(expectedValueLiteral);
      });

      it('should have the property publicKey (base name: "public_key")', function() {
        // TODO: update the code to test the property publicKey
        expect(instance).to.have.property('publicKey');
        // expect(instance.publicKey).to.be(expectedValueLiteral);
      });

      it('should have the property subkeys (base name: "subkeys")', function() {
        // TODO: update the code to test the property subkeys
        expect(instance).to.have.property('subkeys');
        // expect(instance.subkeys).to.be(expectedValueLiteral);
      });

      it('should have the property verified (base name: "verified")', function() {
        // TODO: update the code to test the property verified
        expect(instance).to.have.property('verified');
        // expect(instance.verified).to.be(expectedValueLiteral);
      });

    });
  });

}));
