/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CatalogStage', function() {
      beforeEach(function() {
        instance = new dcs.CatalogStage();
      });

      it('should create an instance of CatalogStage', function() {
        // TODO: update the code to test CatalogStage
        expect(instance).to.be.a(dcs.CatalogStage);
      });

      it('should have the property branchOrTagName (base name: "branch_or_tag_name")', function() {
        // TODO: update the code to test the property branchOrTagName
        expect(instance).to.have.property('branchOrTagName');
        // expect(instance.branchOrTagName).to.be(expectedValueLiteral);
      });

      it('should have the property contentsUrl (base name: "contents_url")', function() {
        // TODO: update the code to test the property contentsUrl
        expect(instance).to.have.property('contentsUrl');
        // expect(instance.contentsUrl).to.be(expectedValueLiteral);
      });

      it('should have the property gitTreesUrl (base name: "git_trees_url")', function() {
        // TODO: update the code to test the property gitTreesUrl
        expect(instance).to.have.property('gitTreesUrl');
        // expect(instance.gitTreesUrl).to.be(expectedValueLiteral);
      });

      it('should have the property releaseUrl (base name: "release_url")', function() {
        // TODO: update the code to test the property releaseUrl
        expect(instance).to.have.property('releaseUrl');
        // expect(instance.releaseUrl).to.be(expectedValueLiteral);
      });

      it('should have the property released (base name: "released")', function() {
        // TODO: update the code to test the property released
        expect(instance).to.have.property('released');
        // expect(instance.released).to.be(expectedValueLiteral);
      });

      it('should have the property tarballUrl (base name: "tarball_url")', function() {
        // TODO: update the code to test the property tarballUrl
        expect(instance).to.have.property('tarballUrl');
        // expect(instance.tarballUrl).to.be(expectedValueLiteral);
      });

      it('should have the property zipballUrl (base name: "zipball_url")', function() {
        // TODO: update the code to test the property zipballUrl
        expect(instance).to.have.property('zipballUrl');
        // expect(instance.zipballUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
