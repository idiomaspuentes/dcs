/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PullRequest', function() {
      beforeEach(function() {
        instance = new dcs.PullRequest();
      });

      it('should create an instance of PullRequest', function() {
        // TODO: update the code to test PullRequest
        expect(instance).to.be.a(dcs.PullRequest);
      });

      it('should have the property assignee (base name: "assignee")', function() {
        // TODO: update the code to test the property assignee
        expect(instance).to.have.property('assignee');
        // expect(instance.assignee).to.be(expectedValueLiteral);
      });

      it('should have the property assignees (base name: "assignees")', function() {
        // TODO: update the code to test the property assignees
        expect(instance).to.have.property('assignees');
        // expect(instance.assignees).to.be(expectedValueLiteral);
      });

      it('should have the property base (base name: "base")', function() {
        // TODO: update the code to test the property base
        expect(instance).to.have.property('base');
        // expect(instance.base).to.be(expectedValueLiteral);
      });

      it('should have the property body (base name: "body")', function() {
        // TODO: update the code to test the property body
        expect(instance).to.have.property('body');
        // expect(instance.body).to.be(expectedValueLiteral);
      });

      it('should have the property closedAt (base name: "closed_at")', function() {
        // TODO: update the code to test the property closedAt
        expect(instance).to.have.property('closedAt');
        // expect(instance.closedAt).to.be(expectedValueLiteral);
      });

      it('should have the property comments (base name: "comments")', function() {
        // TODO: update the code to test the property comments
        expect(instance).to.have.property('comments');
        // expect(instance.comments).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property diffUrl (base name: "diff_url")', function() {
        // TODO: update the code to test the property diffUrl
        expect(instance).to.have.property('diffUrl');
        // expect(instance.diffUrl).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "due_date")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property head (base name: "head")', function() {
        // TODO: update the code to test the property head
        expect(instance).to.have.property('head');
        // expect(instance.head).to.be(expectedValueLiteral);
      });

      it('should have the property htmlUrl (base name: "html_url")', function() {
        // TODO: update the code to test the property htmlUrl
        expect(instance).to.have.property('htmlUrl');
        // expect(instance.htmlUrl).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property isLocked (base name: "is_locked")', function() {
        // TODO: update the code to test the property isLocked
        expect(instance).to.have.property('isLocked');
        // expect(instance.isLocked).to.be(expectedValueLiteral);
      });

      it('should have the property labels (base name: "labels")', function() {
        // TODO: update the code to test the property labels
        expect(instance).to.have.property('labels');
        // expect(instance.labels).to.be(expectedValueLiteral);
      });

      it('should have the property mergeBase (base name: "merge_base")', function() {
        // TODO: update the code to test the property mergeBase
        expect(instance).to.have.property('mergeBase');
        // expect(instance.mergeBase).to.be(expectedValueLiteral);
      });

      it('should have the property mergeCommitSha (base name: "merge_commit_sha")', function() {
        // TODO: update the code to test the property mergeCommitSha
        expect(instance).to.have.property('mergeCommitSha');
        // expect(instance.mergeCommitSha).to.be(expectedValueLiteral);
      });

      it('should have the property mergeable (base name: "mergeable")', function() {
        // TODO: update the code to test the property mergeable
        expect(instance).to.have.property('mergeable');
        // expect(instance.mergeable).to.be(expectedValueLiteral);
      });

      it('should have the property merged (base name: "merged")', function() {
        // TODO: update the code to test the property merged
        expect(instance).to.have.property('merged');
        // expect(instance.merged).to.be(expectedValueLiteral);
      });

      it('should have the property mergedAt (base name: "merged_at")', function() {
        // TODO: update the code to test the property mergedAt
        expect(instance).to.have.property('mergedAt');
        // expect(instance.mergedAt).to.be(expectedValueLiteral);
      });

      it('should have the property mergedBy (base name: "merged_by")', function() {
        // TODO: update the code to test the property mergedBy
        expect(instance).to.have.property('mergedBy');
        // expect(instance.mergedBy).to.be(expectedValueLiteral);
      });

      it('should have the property milestone (base name: "milestone")', function() {
        // TODO: update the code to test the property milestone
        expect(instance).to.have.property('milestone');
        // expect(instance.milestone).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property patchUrl (base name: "patch_url")', function() {
        // TODO: update the code to test the property patchUrl
        expect(instance).to.have.property('patchUrl');
        // expect(instance.patchUrl).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

    });
  });

}));
