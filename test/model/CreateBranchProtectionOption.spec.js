/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CreateBranchProtectionOption', function() {
      beforeEach(function() {
        instance = new dcs.CreateBranchProtectionOption();
      });

      it('should create an instance of CreateBranchProtectionOption', function() {
        // TODO: update the code to test CreateBranchProtectionOption
        expect(instance).to.be.a(dcs.CreateBranchProtectionOption);
      });

      it('should have the property approvalsWhitelistTeams (base name: "approvals_whitelist_teams")', function() {
        // TODO: update the code to test the property approvalsWhitelistTeams
        expect(instance).to.have.property('approvalsWhitelistTeams');
        // expect(instance.approvalsWhitelistTeams).to.be(expectedValueLiteral);
      });

      it('should have the property approvalsWhitelistUsername (base name: "approvals_whitelist_username")', function() {
        // TODO: update the code to test the property approvalsWhitelistUsername
        expect(instance).to.have.property('approvalsWhitelistUsername');
        // expect(instance.approvalsWhitelistUsername).to.be(expectedValueLiteral);
      });

      it('should have the property blockOnOfficialReviewRequests (base name: "block_on_official_review_requests")', function() {
        // TODO: update the code to test the property blockOnOfficialReviewRequests
        expect(instance).to.have.property('blockOnOfficialReviewRequests');
        // expect(instance.blockOnOfficialReviewRequests).to.be(expectedValueLiteral);
      });

      it('should have the property blockOnOutdatedBranch (base name: "block_on_outdated_branch")', function() {
        // TODO: update the code to test the property blockOnOutdatedBranch
        expect(instance).to.have.property('blockOnOutdatedBranch');
        // expect(instance.blockOnOutdatedBranch).to.be(expectedValueLiteral);
      });

      it('should have the property blockOnRejectedReviews (base name: "block_on_rejected_reviews")', function() {
        // TODO: update the code to test the property blockOnRejectedReviews
        expect(instance).to.have.property('blockOnRejectedReviews');
        // expect(instance.blockOnRejectedReviews).to.be(expectedValueLiteral);
      });

      it('should have the property branchName (base name: "branch_name")', function() {
        // TODO: update the code to test the property branchName
        expect(instance).to.have.property('branchName');
        // expect(instance.branchName).to.be(expectedValueLiteral);
      });

      it('should have the property dismissStaleApprovals (base name: "dismiss_stale_approvals")', function() {
        // TODO: update the code to test the property dismissStaleApprovals
        expect(instance).to.have.property('dismissStaleApprovals');
        // expect(instance.dismissStaleApprovals).to.be(expectedValueLiteral);
      });

      it('should have the property enableApprovalsWhitelist (base name: "enable_approvals_whitelist")', function() {
        // TODO: update the code to test the property enableApprovalsWhitelist
        expect(instance).to.have.property('enableApprovalsWhitelist');
        // expect(instance.enableApprovalsWhitelist).to.be(expectedValueLiteral);
      });

      it('should have the property enableMergeWhitelist (base name: "enable_merge_whitelist")', function() {
        // TODO: update the code to test the property enableMergeWhitelist
        expect(instance).to.have.property('enableMergeWhitelist');
        // expect(instance.enableMergeWhitelist).to.be(expectedValueLiteral);
      });

      it('should have the property enablePush (base name: "enable_push")', function() {
        // TODO: update the code to test the property enablePush
        expect(instance).to.have.property('enablePush');
        // expect(instance.enablePush).to.be(expectedValueLiteral);
      });

      it('should have the property enablePushWhitelist (base name: "enable_push_whitelist")', function() {
        // TODO: update the code to test the property enablePushWhitelist
        expect(instance).to.have.property('enablePushWhitelist');
        // expect(instance.enablePushWhitelist).to.be(expectedValueLiteral);
      });

      it('should have the property enableStatusCheck (base name: "enable_status_check")', function() {
        // TODO: update the code to test the property enableStatusCheck
        expect(instance).to.have.property('enableStatusCheck');
        // expect(instance.enableStatusCheck).to.be(expectedValueLiteral);
      });

      it('should have the property mergeWhitelistTeams (base name: "merge_whitelist_teams")', function() {
        // TODO: update the code to test the property mergeWhitelistTeams
        expect(instance).to.have.property('mergeWhitelistTeams');
        // expect(instance.mergeWhitelistTeams).to.be(expectedValueLiteral);
      });

      it('should have the property mergeWhitelistUsernames (base name: "merge_whitelist_usernames")', function() {
        // TODO: update the code to test the property mergeWhitelistUsernames
        expect(instance).to.have.property('mergeWhitelistUsernames');
        // expect(instance.mergeWhitelistUsernames).to.be(expectedValueLiteral);
      });

      it('should have the property protectedFilePatterns (base name: "protected_file_patterns")', function() {
        // TODO: update the code to test the property protectedFilePatterns
        expect(instance).to.have.property('protectedFilePatterns');
        // expect(instance.protectedFilePatterns).to.be(expectedValueLiteral);
      });

      it('should have the property pushWhitelistDeployKeys (base name: "push_whitelist_deploy_keys")', function() {
        // TODO: update the code to test the property pushWhitelistDeployKeys
        expect(instance).to.have.property('pushWhitelistDeployKeys');
        // expect(instance.pushWhitelistDeployKeys).to.be(expectedValueLiteral);
      });

      it('should have the property pushWhitelistTeams (base name: "push_whitelist_teams")', function() {
        // TODO: update the code to test the property pushWhitelistTeams
        expect(instance).to.have.property('pushWhitelistTeams');
        // expect(instance.pushWhitelistTeams).to.be(expectedValueLiteral);
      });

      it('should have the property pushWhitelistUsernames (base name: "push_whitelist_usernames")', function() {
        // TODO: update the code to test the property pushWhitelistUsernames
        expect(instance).to.have.property('pushWhitelistUsernames');
        // expect(instance.pushWhitelistUsernames).to.be(expectedValueLiteral);
      });

      it('should have the property requireSignedCommits (base name: "require_signed_commits")', function() {
        // TODO: update the code to test the property requireSignedCommits
        expect(instance).to.have.property('requireSignedCommits');
        // expect(instance.requireSignedCommits).to.be(expectedValueLiteral);
      });

      it('should have the property requiredApprovals (base name: "required_approvals")', function() {
        // TODO: update the code to test the property requiredApprovals
        expect(instance).to.have.property('requiredApprovals');
        // expect(instance.requiredApprovals).to.be(expectedValueLiteral);
      });

      it('should have the property statusCheckContexts (base name: "status_check_contexts")', function() {
        // TODO: update the code to test the property statusCheckContexts
        expect(instance).to.have.property('statusCheckContexts');
        // expect(instance.statusCheckContexts).to.be(expectedValueLiteral);
      });

    });
  });

}));
