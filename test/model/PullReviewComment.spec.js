/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PullReviewComment', function() {
      beforeEach(function() {
        instance = new dcs.PullReviewComment();
      });

      it('should create an instance of PullReviewComment', function() {
        // TODO: update the code to test PullReviewComment
        expect(instance).to.be.a(dcs.PullReviewComment);
      });

      it('should have the property body (base name: "body")', function() {
        // TODO: update the code to test the property body
        expect(instance).to.have.property('body');
        // expect(instance.body).to.be(expectedValueLiteral);
      });

      it('should have the property commitId (base name: "commit_id")', function() {
        // TODO: update the code to test the property commitId
        expect(instance).to.have.property('commitId');
        // expect(instance.commitId).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property diffHunk (base name: "diff_hunk")', function() {
        // TODO: update the code to test the property diffHunk
        expect(instance).to.have.property('diffHunk');
        // expect(instance.diffHunk).to.be(expectedValueLiteral);
      });

      it('should have the property htmlUrl (base name: "html_url")', function() {
        // TODO: update the code to test the property htmlUrl
        expect(instance).to.have.property('htmlUrl');
        // expect(instance.htmlUrl).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property originalCommitId (base name: "original_commit_id")', function() {
        // TODO: update the code to test the property originalCommitId
        expect(instance).to.have.property('originalCommitId');
        // expect(instance.originalCommitId).to.be(expectedValueLiteral);
      });

      it('should have the property originalPosition (base name: "original_position")', function() {
        // TODO: update the code to test the property originalPosition
        expect(instance).to.have.property('originalPosition');
        // expect(instance.originalPosition).to.be(expectedValueLiteral);
      });

      it('should have the property path (base name: "path")', function() {
        // TODO: update the code to test the property path
        expect(instance).to.have.property('path');
        // expect(instance.path).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property pullRequestReviewId (base name: "pull_request_review_id")', function() {
        // TODO: update the code to test the property pullRequestReviewId
        expect(instance).to.have.property('pullRequestReviewId');
        // expect(instance.pullRequestReviewId).to.be(expectedValueLiteral);
      });

      it('should have the property pullRequestUrl (base name: "pull_request_url")', function() {
        // TODO: update the code to test the property pullRequestUrl
        expect(instance).to.have.property('pullRequestUrl');
        // expect(instance.pullRequestUrl).to.be(expectedValueLiteral);
      });

      it('should have the property resolver (base name: "resolver")', function() {
        // TODO: update the code to test the property resolver
        expect(instance).to.have.property('resolver');
        // expect(instance.resolver).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updated_at")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

    });
  });

}));
