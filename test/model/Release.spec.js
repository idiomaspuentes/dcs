/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Release', function() {
      beforeEach(function() {
        instance = new dcs.Release();
      });

      it('should create an instance of Release', function() {
        // TODO: update the code to test Release
        expect(instance).to.be.a(dcs.Release);
      });

      it('should have the property assets (base name: "assets")', function() {
        // TODO: update the code to test the property assets
        expect(instance).to.have.property('assets');
        // expect(instance.assets).to.be(expectedValueLiteral);
      });

      it('should have the property author (base name: "author")', function() {
        // TODO: update the code to test the property author
        expect(instance).to.have.property('author');
        // expect(instance.author).to.be(expectedValueLiteral);
      });

      it('should have the property body (base name: "body")', function() {
        // TODO: update the code to test the property body
        expect(instance).to.have.property('body');
        // expect(instance.body).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "created_at")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property draft (base name: "draft")', function() {
        // TODO: update the code to test the property draft
        expect(instance).to.have.property('draft');
        // expect(instance.draft).to.be(expectedValueLiteral);
      });

      it('should have the property htmlUrl (base name: "html_url")', function() {
        // TODO: update the code to test the property htmlUrl
        expect(instance).to.have.property('htmlUrl');
        // expect(instance.htmlUrl).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property prerelease (base name: "prerelease")', function() {
        // TODO: update the code to test the property prerelease
        expect(instance).to.have.property('prerelease');
        // expect(instance.prerelease).to.be(expectedValueLiteral);
      });

      it('should have the property publishedAt (base name: "published_at")', function() {
        // TODO: update the code to test the property publishedAt
        expect(instance).to.have.property('publishedAt');
        // expect(instance.publishedAt).to.be(expectedValueLiteral);
      });

      it('should have the property tagName (base name: "tag_name")', function() {
        // TODO: update the code to test the property tagName
        expect(instance).to.have.property('tagName');
        // expect(instance.tagName).to.be(expectedValueLiteral);
      });

      it('should have the property tarballUrl (base name: "tarball_url")', function() {
        // TODO: update the code to test the property tarballUrl
        expect(instance).to.have.property('tarballUrl');
        // expect(instance.tarballUrl).to.be(expectedValueLiteral);
      });

      it('should have the property targetCommitish (base name: "target_commitish")', function() {
        // TODO: update the code to test the property targetCommitish
        expect(instance).to.have.property('targetCommitish');
        // expect(instance.targetCommitish).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property zipballUrl (base name: "zipball_url")', function() {
        // TODO: update the code to test the property zipballUrl
        expect(instance).to.have.property('zipballUrl');
        // expect(instance.zipballUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
