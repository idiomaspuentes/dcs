/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('User', function() {
      beforeEach(function() {
        instance = new dcs.User();
      });

      it('should create an instance of User', function() {
        // TODO: update the code to test User
        expect(instance).to.be.a(dcs.User);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property avatarUrl (base name: "avatar_url")', function() {
        // TODO: update the code to test the property avatarUrl
        expect(instance).to.have.property('avatarUrl');
        // expect(instance.avatarUrl).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property followersCount (base name: "followers_count")', function() {
        // TODO: update the code to test the property followersCount
        expect(instance).to.have.property('followersCount');
        // expect(instance.followersCount).to.be(expectedValueLiteral);
      });

      it('should have the property followingCount (base name: "following_count")', function() {
        // TODO: update the code to test the property followingCount
        expect(instance).to.have.property('followingCount');
        // expect(instance.followingCount).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "full_name")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property isAdmin (base name: "is_admin")', function() {
        // TODO: update the code to test the property isAdmin
        expect(instance).to.have.property('isAdmin');
        // expect(instance.isAdmin).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property lastLogin (base name: "last_login")', function() {
        // TODO: update the code to test the property lastLogin
        expect(instance).to.have.property('lastLogin');
        // expect(instance.lastLogin).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property login (base name: "login")', function() {
        // TODO: update the code to test the property login
        expect(instance).to.have.property('login');
        // expect(instance.login).to.be(expectedValueLiteral);
      });

      it('should have the property prohibitLogin (base name: "prohibit_login")', function() {
        // TODO: update the code to test the property prohibitLogin
        expect(instance).to.have.property('prohibitLogin');
        // expect(instance.prohibitLogin).to.be(expectedValueLiteral);
      });

      it('should have the property repoLanguages (base name: "repo_languages")', function() {
        // TODO: update the code to test the property repoLanguages
        expect(instance).to.have.property('repoLanguages');
        // expect(instance.repoLanguages).to.be(expectedValueLiteral);
      });

      it('should have the property repoSubjects (base name: "repo_subjects")', function() {
        // TODO: update the code to test the property repoSubjects
        expect(instance).to.have.property('repoSubjects');
        // expect(instance.repoSubjects).to.be(expectedValueLiteral);
      });

      it('should have the property restricted (base name: "restricted")', function() {
        // TODO: update the code to test the property restricted
        expect(instance).to.have.property('restricted');
        // expect(instance.restricted).to.be(expectedValueLiteral);
      });

      it('should have the property starredReposCount (base name: "starred_repos_count")', function() {
        // TODO: update the code to test the property starredReposCount
        expect(instance).to.have.property('starredReposCount');
        // expect(instance.starredReposCount).to.be(expectedValueLiteral);
      });

      it('should have the property visibility (base name: "visibility")', function() {
        // TODO: update the code to test the property visibility
        expect(instance).to.have.property('visibility');
        // expect(instance.visibility).to.be(expectedValueLiteral);
      });

      it('should have the property website (base name: "website")', function() {
        // TODO: update the code to test the property website
        expect(instance).to.have.property('website');
        // expect(instance.website).to.be(expectedValueLiteral);
      });

    });
  });

}));
