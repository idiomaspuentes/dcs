/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('EditUserOption', function() {
      beforeEach(function() {
        instance = new dcs.EditUserOption();
      });

      it('should create an instance of EditUserOption', function() {
        // TODO: update the code to test EditUserOption
        expect(instance).to.be.a(dcs.EditUserOption);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property admin (base name: "admin")', function() {
        // TODO: update the code to test the property admin
        expect(instance).to.have.property('admin');
        // expect(instance.admin).to.be(expectedValueLiteral);
      });

      it('should have the property allowCreateOrganization (base name: "allow_create_organization")', function() {
        // TODO: update the code to test the property allowCreateOrganization
        expect(instance).to.have.property('allowCreateOrganization');
        // expect(instance.allowCreateOrganization).to.be(expectedValueLiteral);
      });

      it('should have the property allowGitHook (base name: "allow_git_hook")', function() {
        // TODO: update the code to test the property allowGitHook
        expect(instance).to.have.property('allowGitHook');
        // expect(instance.allowGitHook).to.be(expectedValueLiteral);
      });

      it('should have the property allowImportLocal (base name: "allow_import_local")', function() {
        // TODO: update the code to test the property allowImportLocal
        expect(instance).to.have.property('allowImportLocal');
        // expect(instance.allowImportLocal).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "full_name")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property loginName (base name: "login_name")', function() {
        // TODO: update the code to test the property loginName
        expect(instance).to.have.property('loginName');
        // expect(instance.loginName).to.be(expectedValueLiteral);
      });

      it('should have the property maxRepoCreation (base name: "max_repo_creation")', function() {
        // TODO: update the code to test the property maxRepoCreation
        expect(instance).to.have.property('maxRepoCreation');
        // expect(instance.maxRepoCreation).to.be(expectedValueLiteral);
      });

      it('should have the property mustChangePassword (base name: "must_change_password")', function() {
        // TODO: update the code to test the property mustChangePassword
        expect(instance).to.have.property('mustChangePassword');
        // expect(instance.mustChangePassword).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property prohibitLogin (base name: "prohibit_login")', function() {
        // TODO: update the code to test the property prohibitLogin
        expect(instance).to.have.property('prohibitLogin');
        // expect(instance.prohibitLogin).to.be(expectedValueLiteral);
      });

      it('should have the property restricted (base name: "restricted")', function() {
        // TODO: update the code to test the property restricted
        expect(instance).to.have.property('restricted');
        // expect(instance.restricted).to.be(expectedValueLiteral);
      });

      it('should have the property sourceId (base name: "source_id")', function() {
        // TODO: update the code to test the property sourceId
        expect(instance).to.have.property('sourceId');
        // expect(instance.sourceId).to.be(expectedValueLiteral);
      });

      it('should have the property visibility (base name: "visibility")', function() {
        // TODO: update the code to test the property visibility
        expect(instance).to.have.property('visibility');
        // expect(instance.visibility).to.be(expectedValueLiteral);
      });

      it('should have the property website (base name: "website")', function() {
        // TODO: update the code to test the property website
        expect(instance).to.have.property('website');
        // expect(instance.website).to.be(expectedValueLiteral);
      });

    });
  });

}));
