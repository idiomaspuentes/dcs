/*
 * DCS (Gitea) API.
 * This documentation describes the DCS (Gitea) API.
 *
 * OpenAPI spec version: 1.15.6a+dcs
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dcs);
  }
}(this, function(expect, dcs) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MergePullRequestOption', function() {
      beforeEach(function() {
        instance = new dcs.MergePullRequestOption();
      });

      it('should create an instance of MergePullRequestOption', function() {
        // TODO: update the code to test MergePullRequestOption
        expect(instance).to.be.a(dcs.MergePullRequestOption);
      });

      it('should have the property _do (base name: "Do")', function() {
        // TODO: update the code to test the property _do
        expect(instance).to.have.property('_do');
        // expect(instance._do).to.be(expectedValueLiteral);
      });

      it('should have the property mergeCommitID (base name: "MergeCommitID")', function() {
        // TODO: update the code to test the property mergeCommitID
        expect(instance).to.have.property('mergeCommitID');
        // expect(instance.mergeCommitID).to.be(expectedValueLiteral);
      });

      it('should have the property mergeMessageField (base name: "MergeMessageField")', function() {
        // TODO: update the code to test the property mergeMessageField
        expect(instance).to.have.property('mergeMessageField');
        // expect(instance.mergeMessageField).to.be(expectedValueLiteral);
      });

      it('should have the property mergeTitleField (base name: "MergeTitleField")', function() {
        // TODO: update the code to test the property mergeTitleField
        expect(instance).to.have.property('mergeTitleField');
        // expect(instance.mergeTitleField).to.be(expectedValueLiteral);
      });

      it('should have the property deleteBranchAfterMerge (base name: "delete_branch_after_merge")', function() {
        // TODO: update the code to test the property deleteBranchAfterMerge
        expect(instance).to.have.property('deleteBranchAfterMerge');
        // expect(instance.deleteBranchAfterMerge).to.be(expectedValueLiteral);
      });

      it('should have the property forceMerge (base name: "force_merge")', function() {
        // TODO: update the code to test the property forceMerge
        expect(instance).to.have.property('forceMerge');
        // expect(instance.forceMerge).to.be(expectedValueLiteral);
      });

    });
  });

}));
